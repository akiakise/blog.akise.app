<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7 系统使用 Gunicorn、Supervisor、Nginx 部署使用了工厂模式的 Flask 项目</title>
    <url>//posts/python-flask-deploy/</url>
    <content><![CDATA[<p>项目后端从原始 socket 模式切换到了 RESTful API，考虑到项目的复杂度不高，于是我决定采用 Flask 来实现，本文记录一下基于 Gunicorn、Supervisor 和 Nginx 的最终的部署过程。</p>
<span id="more"></span>

<p>我们使用一个简单的 Flask Demo 来跑通整个流程。</p>
<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><p>项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-REST-Server</span><br><span class="line">  |-app</span><br><span class="line">    |-__init__.py</span><br><span class="line">    |-api_0_1_0</span><br><span class="line">      |-__init__.py</span><br><span class="line">      |-views.py</span><br><span class="line">  |-config.py</span><br><span class="line">  |-manage.py</span><br><span class="line">  |-wsgi.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>考虑到版本向下兼容，同时为了测试方便，使用不同的目录区分不同的 API 版本。在 <code>app/__init__.py</code> 中的 <code>create_app()</code> 函数中注册所有受支持的 api 蓝本（依据不同的 api 版本，在注册的时候设置不同的前缀，本例设置的前缀是：<code>/api/v0.1.0</code>），这样就做到了同时支持新旧功能。</p>
</blockquote>
<p><code>app</code> 文件夹是项目主体<br><code>manage.py</code> 主要是本地测试使用<br><code>config.py</code> 是配置文件<br><code>wsgi.py</code> 是<code>部署文件</code>，其内容是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app</span><br><span class="line">app = create_app()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h2><p>Gunicorn (独角兽)是一个高效的 Python WSGI Server，通常用它来运行 WSGI 应用（由我们编写的符合 WSGI 标准的后端服务）或者 WSGI 框架(如 Django，Paster 等)，其地位相当于 Java 中的 Tomcat。</p>
<p>使用 pip 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure>

<p>在项目 root 目录下（有 <code>wsgi.py</code> 的那个目录）运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunicorn -w 2 -b 127.0.0.1:5000 wsgi:app</span><br></pre></td></tr></table></figure>

<ul>
<li>-w 后接工作线程数</li>
<li>-b 后接绑定地址，即本机访问地址</li>
<li>wsgi 即第一步中的部署文件</li>
<li>app 是部署文件中的全局变量 app</li>
</ul>
<p>运行后，在本地用 <code>curl localhost:5000/api/v0.1.0</code>（该命令受你的配置影响。<code>/api/v0.1.0</code>是我注册蓝本时添加的前缀，如果你注册时并没有添加，请不要使用此链接）即可成功访问。</p>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><p>利用 yum 可以直接安装 Supervisor，需要注意 Supervisor 是直接运行在系统中的，所以<strong>不要在虚拟环境中安装</strong>。 而且 Supervisor 也只支持 Python2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install supervisor</span><br></pre></td></tr></table></figure>

<p>创建配置文件：<code>/etc/supervisord.d/server.ini</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:server]</span><br><span class="line">directory=/项目目录</span><br><span class="line">command=/虚拟环境目录/bin/gunicorn -w 2 -b 127.0.0.1:5000 wsgi:app</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=用户</span><br><span class="line">startsecs=3</span><br><span class="line">startretries=5</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile_maxbytes=50MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">stdout_logfile=/opt/server.log</span><br></pre></td></tr></table></figure>

<p>修改 <code>/etc/supervisord.conf</code> 将配置文件包含进来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.ini</span><br></pre></td></tr></table></figure>

<p>在我写这篇文章的时候，通过 yum 安装的 Supervisor 的配置文件已经默认是上边的格式，所以你只需要在 <code>/etc/supervisord.d/</code> 下创建你的 <code>程序.ini</code> 即可。</p>
<p>配置完成后启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>关于正向代理和反向代理的概念只是不同位置请求网络资源的不同说法，你用笔记本上网浏览网页通过的一个代理就叫正向代理，如果互联网过来的一个请求访问一个 IDC 机房的一个内网 web 服务，这个服务由 nginx 转进来就叫做反向代理，nginx 一般用于反向代理和负载均衡，这个 IDC 机房的 web 服务也可以直接用公网IP访问，但是为了解决高并发负载均衡的问题引入了 nginx 反向代理这个概念。</p>
<p>一个服务器只能对外暴露一个 80 端口，而我们有多个服务同时在跑，因此我们就需要借助 Nginx 反向代理，复用 80 端口，由 Nginx 完成 [客户端 -&gt; 域名 -&gt; 服务器 -&gt; 具体服务] 中，服务器接收到请求后路由给特定服务的工作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    #index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    # 重要的是这部分</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass      http://127.0.0.1:5000/;</span><br><span class="line">        proxy_redirect  off;</span><br><span class="line"></span><br><span class="line">        proxy_set_header    Host                $host;</span><br><span class="line">        proxy_set_header    X-Real-IP           $remote_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header    X-Forwarded-Proto   $scheme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      30d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      12h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /.well-known &#123;</span><br><span class="line">        allow all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.</span><br><span class="line">    &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log  /home/wwwlogs/access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用 <code>nginx -t</code> 检查配置无误后重启 nginx。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>打开本地浏览器，访问 <code>ip/api/v0.1.0</code>（后面的 <code>/api/v0.1.0</code> 基于你自己的配置，如果你在注册蓝本时没有设置前缀，请不要添加），成功看到 <code>Hello World</code>。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 自定义静态资源位置</title>
    <url>//posts/nginx-static-resources/</url>
    <content><![CDATA[<blockquote>
<p>nginx [Engine X] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP&#x2F;UDP proxy server, originally written by <a href="http://sysoev.ru/en/">Igor Sysoev</a>.</p>
</blockquote>
<span id="more"></span>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>项目后端之前变更为了 Flask 框架 + RESTful API 模式，然后通过 Gunicorn + Supervisor + Nginx 部署在 CentOS 7 服务器上。最近客户端需要访问服务器提供的静态资源（图片），我在 Flask 中配置了静态资源后客户端却无法访问。</p>
<p>项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─app</span><br><span class="line">│  ├─api_dev</span><br><span class="line">│  ├─api_error</span><br><span class="line">│  ├─api_stable</span><br><span class="line">│  ├─static</span><br><span class="line">│  │  └─images</span><br><span class="line">│  └─templates</span><br><span class="line">├─migrations</span><br><span class="line">└─test</span><br></pre></td></tr></table></figure>

<p>在 <code>app/static/images</code> 文件夹下有一个 <code>test.png</code> 测试图片。在 Win10 本地运行项目，访问 <code>http://127.0.0.1:5000/static/images/test.png</code> 可以正常看到测试图片，但是当部署到服务器后，无法正常访问图片。</p>
<h2 id="排查原因"><a href="#排查原因" class="headerlink" title="排查原因"></a>排查原因</h2><p>在 Win10 和手机浏览器访问 <code>https://域名.com/static/images/test.png</code> 都显示 <code>404 Not Found</code>。</p>
<p>在云服务器使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:5000/static/images/test.png</span><br></pre></td></tr></table></figure>

<p>发现结果是乱码：</p>
<p><img src="/img/tech/server_curl_test.png" alt="curl" title="curl"></p>
<p>证明成功访问到了图片资源。</p>
<p>以上测试说明，服务器端代码没有问题。那么问题一定出在 Gunicorn + Supervisor + Nginx 其中的一环，其他两个组件不涉及 URL 路由，那就一定是 Nginx 配置的问题了。</p>
<h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p>由于我是用的是 lnmp 一键安装包，所以 Nginx 配置是自动生成的，检查配置文件 <code>/use/local/nginx/conf/vhost/域名.com.conf</code> 发现并没有对静态资源做相应的配置。我们之前出错的页面显示的是 <code>404 Not Found</code> 说明 Nginx 并没有找到我们的静态文件。</p>
<p>因为使用了 vhost，所以配置文件中默认的 root 地址并不是我们项目的地址，我首先尝试修改 root 值为 <code>/path/to/project/root/app</code> 但是没有解决问题。</p>
<p>因为是 Flask 项目，使用 Nginx 做反向代理，所以我尝试这在 proxy_pass 中配置了静态资源的路径，依然不行。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>通过 Google 发现，需要自己配置静态文件的路径。在参考了 StackOverflow 上部分配置文件的内容后终于成功了！</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span> /path/to/project/root/app/;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还记得我的目录树吗？不记得了可以往上翻。请记住，如果你这样写，root 的路径一定是 static 目录的上层目录。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>出现问题，一步一步排查缩小可能出现问题的范围，发现问题原因，尝试手动解决，谷歌、StackOverflow、官方文档，解决问题。按照着这个步骤走下去，大部分 Linux 上的问题都可以成功解决的吧！</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 提供文件下载服务</title>
    <url>//posts/nginx-provide-download/</url>
    <content><![CDATA[<p>有时候我们可能需要提供一些配置文件或安装包的下载链接，这种场景使用 CDN 有些杀鸡用牛刀，通过 Eginx 配置可以简单快速的提供功能。</p>
<span id="more"></span>

<p>Nginx 配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> download.akise.app;</span><br><span class="line">    <span class="attribute">root</span> /path/to/download.akise.app;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /app &#123;</span><br><span class="line">        <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件夹配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /path/to/download.akise.app/app</span><br><span class="line"><span class="built_in">touch</span> /path/to/download.akise.app/app/t.apk</span><br></pre></td></tr></table></figure>

<p>浏览器访问 <code>http://download.akise.app/app/t.apk</code> 即会自动开始下载。</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot WebSocket 发送广播，Android 接收</title>
    <url>//posts/spring-boot-websocket-android-client/</url>
    <content><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket 为客户端、浏览器和服务端提供了双工异步通信的功能，即客户端（浏览器、Android）可以向服务器发送消息，服务器端也可以向客户端发送消息。</p>
<span id="more"></span>

<p>WebSocket 是通过一个 socket 来实现双工异步通信能力的。但是直接使用 WebSocket 协议开发程序会十分繁琐，因此我们使用它的子协议 <code>STOMP</code>，它是一个更高级别的协议。<code>STOMP</code> 协议使用一个基于帧的格式来定义消息，与 HTTP 的 request 和 response 类似（具有类似于 <code>@RequestMpping</code> 的注解 <code>@MessageMapping</code>）。</p>
<h2 id="Spring-Boot-的支持"><a href="#Spring-Boot-的支持" class="headerlink" title="Spring Boot 的支持"></a>Spring Boot 的支持</h2><p>Spring Boot 对内嵌的 Tomcat、Jetty 和 Undertow 使用 WebSocket 提供了支持。</p>
<p>Spring Boot 为 WebSocket 提供的 starter pom 是 <code>spring-boot-starter-websocket</code>。</p>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="使用-Intellij-IDEA-maven-搭建。"><a href="#使用-Intellij-IDEA-maven-搭建。" class="headerlink" title="使用 Intellij IDEA + maven 搭建。"></a>使用 Intellij IDEA + maven 搭建。</h3><p>spring-boot-starter 选择 Thymeleaf 和 WebSocket</p>
<p><img src="/img/tech/spring-boot-starter.png" alt="starter pom"></p>
<h3 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h3><p>拦截器可以在 WebSocket 握手前后进行一些预设置。</p>
<p>HandshakeInterceptor.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandshakeInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HttpSessionHandshakeInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;xlui&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebSocket 握手前</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 可以设置数据到 attributes 中，并在 WebSocketHandler 的 session 中获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;HandshakeInterceptor: beforeHandshake&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;Attributes: &quot;</span> + attributes.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.beforeHandshake(request, response, wsHandler, attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WebSocket 握手后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception ex)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;HandshakeInterceptor: afterHandshake&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.afterHandshake(request, response, wsHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><p>WebSocketConfig.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 启用 Websocket 的消息代理</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractWebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line">	<span class="comment">// 注册 STOMP 协议的节点（Endpoint），并映射为指定的 URL</span></span><br><span class="line">	<span class="comment">// 我们使用 STOMP，所以不需要再实现 WebSocketHandler。</span></span><br><span class="line">	<span class="comment">// 实现 WebSocketHandler 的目的是接收和处理消息，STOMP 已经为我们做了这些。</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry stompEndpointRegistry)</span> &#123;</span><br><span class="line">		<span class="comment">// 注册 STOMP 协议的节点，并指定使用 SockJS 协议</span></span><br><span class="line">		stompEndpointRegistry.addEndpoint(<span class="string">&quot;/im&quot;</span>).addInterceptors(<span class="keyword">new</span> <span class="title class_">HandshakeInterceptor</span>()).withSockJS();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 配置使用消息代理</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">		<span class="comment">// 统一配置消息代理，消息代理即订阅点，客户端通过订阅消息代理点接受消息</span></span><br><span class="line">		registry.enableSimpleBroker(<span class="string">&quot;/b&quot;</span>, <span class="string">&quot;/g&quot;</span>, <span class="string">&quot;/user&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 配置点对点消息的前缀</span></span><br><span class="line">		registry.setUserDestinationPrefix(<span class="string">&quot;/user&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过注解 <code>@EnableWebSocketMessageBroker</code> 开启使用 STOMP 协议来传输基于代理（message broker）的消息，这时控制器使用 <code>@MessageMapping</code> 就像使用 <code>@RequestMapping</code> 一样。</p>
<h3 id="消息发送与接收类"><a href="#消息发送与接收类" class="headerlink" title="消息发送与接收类"></a>消息发送与接收类</h3><p>Message.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.message;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器向服务端发送的消息应该用此类接受</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Response.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.message;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器向客户端发送此类消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String responseMessage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Response</span><span class="params">(String responseMessage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.responseMessage = responseMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResponseMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> responseMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.xlui.im.message.ChatMessage;</span><br><span class="line"><span class="keyword">import</span> me.xlui.im.message.Message;</span><br><span class="line"><span class="keyword">import</span> me.xlui.im.message.Response;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.DestinationVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当客户端向服务器发送请求时，通过 `@MessageMapping` 映射 /broadcast 这个地址</span></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/broadcast&quot;)</span></span><br><span class="line">    <span class="comment">// 当服务器有消息时，会对订阅了 @SendTo 中的路径的客户端发送消息</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;/b&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">say</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Welcome, &quot;</span> + message.getName() + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/group/&#123;groupID&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">group</span><span class="params">(<span class="meta">@DestinationVariable</span> <span class="type">int</span> groupID, Message message)</span> &#123;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Welcome to group &quot;</span> + groupID + <span class="string">&quot;, &quot;</span> + message.getName() + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        simpMessagingTemplate.convertAndSend(<span class="string">&quot;/g/&quot;</span> + groupID, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/chat&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chat</span><span class="params">(ChatMessage chatMessage)</span> &#123;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Receive message from user &quot;</span> + chatMessage.getFromUserID() + <span class="string">&quot;: &quot;</span> + chatMessage.getMessage());</span><br><span class="line">        simpMessagingTemplate.convertAndSendToUser(String.valueOf(chatMessage.getUserID()), <span class="string">&quot;/msg&quot;</span>, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器演示页面"><a href="#浏览器演示页面" class="headerlink" title="浏览器演示页面"></a>浏览器演示页面</h2><p>静态资源放在 <code>src/main/resources/static</code> 下</p>
<h3 id="广播-broadcast-html"><a href="#广播-broadcast-html" class="headerlink" title="广播 broadcast.html"></a>广播 broadcast.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot WebSocket 广播式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;disconnect()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: #ff0000;&quot;</span>&gt;</span>貌似你的浏览器不支持 websocket<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;connect&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;connect();&quot;</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;disconnect&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;disconnect();&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conversationDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>输入你的名字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sendName&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sendName();&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;sockjs.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;stomp.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;jquery.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> stompClient = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setConnected</span>(<span class="params">connected</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        conn = $(<span class="string">&#x27;#connect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        disconn = $(<span class="string">&#x27;#disconnect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (connected) &#123;</span></span><br><span class="line"><span class="language-javascript">            conn.<span class="title function_">attr</span>(<span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            disconn.<span class="title function_">removeAttr</span>(<span class="string">&#x27;disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            conn.<span class="title function_">removeAttr</span>(<span class="string">&#x27;disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            disconn.<span class="title function_">attr</span>(<span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;conversationDiv&#x27;</span>).<span class="property">style</span>.<span class="property">visibility</span> = connected ? <span class="string">&#x27;visible&#x27;</span> : <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#response&#x27;</span>).<span class="title function_">html</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">&quot;/im&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span></span><br><span class="line"><span class="language-javascript">        stompClient.<span class="title function_">connect</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params">frame</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setConnected</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected: &#x27;</span> + frame);</span></span><br><span class="line"><span class="language-javascript">            stompClient.<span class="title function_">subscribe</span>(<span class="string">&#x27;/b&#x27;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showResponse</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="property">body</span>).<span class="property">response</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">disconnect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (stompClient != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            stompClient.<span class="title function_">disconnect</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setConnected</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Disconnected&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = $(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        stompClient.<span class="title function_">send</span>(<span class="string">&#x27;/broadcast&#x27;</span>, &#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&#x27;name&#x27;</span>: name&#125;));</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">showResponse</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> response = $(<span class="string">&#x27;#response&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        response.<span class="title function_">html</span>(response.<span class="title function_">text</span>() + <span class="string">&#x27;\r\n&#x27;</span> + message);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>动态群组与点对点聊天的代码见 GitHub。</p>
<h3 id="配置路径映射"><a href="#配置路径映射" class="headerlink" title="配置路径映射"></a>配置路径映射</h3><p>WebMvcConfig.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/broadcast&quot;</span>).setViewName(<span class="string">&quot;/broadcast&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/group&quot;</span>).setViewName(<span class="string">&quot;/group&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/chat&quot;</span>).setViewName(<span class="string">&quot;/chat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h3><p>运行程序，浏览器同时打开数个窗口，连接。</p>
<p>广播</p>
<p><img src="/img/tech/websocket-browser-broadcast.gif" alt="browser"></p>
<p>动态群组</p>
<p><img src="/img/tech/websocket-browser-group.gif" alt="browser"></p>
<p>点对点</p>
<p><img src="/img/tech/websocket-browser-chat.gif" alt="browser"></p>
<h2 id="安卓客户端"><a href="#安卓客户端" class="headerlink" title="安卓客户端"></a>安卓客户端</h2><p><code>STOMP</code> 协议在 Android 系统中没有默认实现，不过有开源项目已经实现了，所以我们只需要添加依赖直接使用就好。</p>
<h3 id="build-gradle-project"><a href="#build-gradle-project" class="headerlink" title="build.gradle(project)"></a>build.gradle(project)</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">allprojects</span> &#123;</span><br><span class="line">    <span class="string">repositories</span> &#123;</span><br><span class="line">        <span class="string">google()</span></span><br><span class="line">        <span class="string">jcenter()</span></span><br><span class="line">        <span class="string">maven</span> &#123; <span class="string">url</span> <span class="string">&quot;https://jitpack.io&quot;</span> &#125;</span><br><span class="line">        <span class="string">//</span> <span class="string">添加</span> <span class="string">maven</span> <span class="string">仓库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="build-gradle-app"><a href="#build-gradle-app" class="headerlink" title="build.gradle(app)"></a>build.gradle(app)</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">compile</span> <span class="string">&#x27;com.squareup.okhttp3:okhttp:3.9.0&#x27;</span></span><br><span class="line"><span class="string">compile</span> <span class="string">&#x27;org.java-websocket:Java-WebSocket:1.3.7&#x27;</span></span><br><span class="line"><span class="string">compile</span> <span class="string">&#x27;com.github.NaikSoftware:StompProtocolAndroid:1.4.3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们使用的是 <code>StompProtocolAndroid</code>，它同时依赖于 WebSocket 的标准实现 <code>Java-WebSocket</code>。</p>
<p>不过 <code>Java-WebSocket</code> 实现的 <code>WebSocket</code> 类在我这里不太好使，所以我换了 <code>okhttp</code> 实现的 <code>WebSocket</code> 类。</p>
<h3 id="网络权限"><a href="#网络权限" class="headerlink" title="网络权限"></a>网络权限</h3><p>在 <code>AndroidManifest.xml</code> 中添加网络权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p><img src="/img/tech/websocket-android-layout.png" alt="安卓广播布局"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;me.xlui.im.activities.BroadcastActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--tools:text=&quot;广播&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/broadcast&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/broadcast&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/groups&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/groups&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/chat&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/chat&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical|center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/broadcast_prompt&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:inputType</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;16dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/send&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/send&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>广播 Activity 的代码，其他代码（动态群组、点对点）见 GitHub。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.im.activities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscriber;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Subscription;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.xlui.im.R;</span><br><span class="line"><span class="keyword">import</span> me.xlui.im.conf.Const;</span><br><span class="line"><span class="keyword">import</span> me.xlui.im.util.StompUtils;</span><br><span class="line"><span class="keyword">import</span> okhttp3.WebSocket;</span><br><span class="line"><span class="keyword">import</span> ua.naiksoftware.stomp.Stomp;</span><br><span class="line"><span class="keyword">import</span> ua.naiksoftware.stomp.client.StompClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button broadcast;</span><br><span class="line">    <span class="keyword">private</span> Button groups;</span><br><span class="line">    <span class="keyword">private</span> Button chat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText name;</span><br><span class="line">    <span class="keyword">private</span> Button send;</span><br><span class="line">    <span class="keyword">private</span> TextView result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        broadcast = findViewById(R.id.broadcast);</span><br><span class="line">        broadcast.setEnabled(<span class="literal">false</span>);</span><br><span class="line">        groups = findViewById(R.id.groups);</span><br><span class="line">        chat = findViewById(R.id.chat);</span><br><span class="line">        name = findViewById(R.id.name);</span><br><span class="line">        send = findViewById(R.id.send);</span><br><span class="line">        result = findViewById(R.id.show);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_broadcast);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line"></span><br><span class="line">        <span class="type">StompClient</span> <span class="variable">stompClient</span> <span class="operator">=</span> Stomp.over(WebSocket.class, Const.address);</span><br><span class="line">        <span class="comment">// 连接服务器</span></span><br><span class="line">        stompClient.connect();</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;开始连接&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        StompUtils.connect(stompClient);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅消息</span></span><br><span class="line">        stompClient.topic(Const.broadcastResponse).subscribe(stompMessage -&gt; &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(stompMessage.getPayload());</span><br><span class="line">            Log.i(Const.TAG, <span class="string">&quot;Receive: &quot;</span> + stompMessage.getPayload());</span><br><span class="line">            runOnUiThread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result.append(jsonObject.getString(<span class="string">&quot;response&quot;</span>) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        send.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jsonObject.put(<span class="string">&quot;name&quot;</span>, name.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stompClient.send(Const.broadcast, jsonObject.toString()).subscribe(<span class="keyword">new</span> <span class="title class_">Subscriber</span>&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Subscription s)</span> &#123;</span><br><span class="line">                    Log.i(Const.TAG, <span class="string">&quot;onSubscribe: 订阅成功！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Void aVoid)</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">                    t.printStackTrace();</span><br><span class="line">                    Log.e(Const.TAG, <span class="string">&quot;发生错误：&quot;</span>, t);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">                    Log.i(Const.TAG, <span class="string">&quot;onComplete: Send Complete!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        groups.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">            intent.setClass(BroadcastActivity.<span class="built_in">this</span>, GroupActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            <span class="built_in">this</span>.finish();</span><br><span class="line">        &#125;);</span><br><span class="line">        chat.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">            intent.setClass(BroadcastActivity.<span class="built_in">this</span>, ChatActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            <span class="built_in">this</span>.finish();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>广播</p>
<p><img src="/img/tech/websocket-android-broadcast.gif" alt="broadcast"></p>
<p>动态群组</p>
<p><img src="/img/tech/websocket-android-group.gif" alt="group"></p>
<p>点对点</p>
<p><img src="/img/tech/websocket-android-chat.gif" alt="chat"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源代码已经上传到 GitHub，<a href="https://github.com/xlui/WebSocketExample">https://github.com/xlui/WebSocketExample</a>，欢迎 star。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot</tag>
        <tag>websocket</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 集成 Shiro 权限管理与密码加盐加密存储</title>
    <url>//posts/spring-boot-shiro/</url>
    <content><![CDATA[<p>在 Spring 中，流行的涉及权限管理的框架有两个：Spring Security 和 Apache Shiro。但是去了解一下 Spring Security 就知道，简单的权限管理根本用不到那么复杂的功能。在自己的项目中，我更倾向于使用简单明了的 Apache Shiro。</p>
<span id="more"></span>

<p>我们以最常见的<code>用户、角色、权限</code>关系做例子。一个用户有多个角色、一个角色有多个用户、一个角色有多个权限、一个权限有多个角色。即用户与角色、角色与权限是多对多关系。</p>
<h2 id="引入-shiro-spring-包"><a href="#引入-shiro-spring-包" class="headerlink" title="引入 shiro-spring 包"></a>引入 shiro-spring 包</h2><h3 id="pom包依赖"><a href="#pom包依赖" class="headerlink" title="pom包依赖"></a>pom包依赖</h3><p>重要的是 shiro-spring 这个包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MariaDB --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.driver-class-name=org.mariadb.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=test</span><br><span class="line">spring.datasource.password=test</span><br><span class="line"></span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"></span><br><span class="line">spring.jackson.serialization.indent-output=true</span><br></pre></td></tr></table></figure>

<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><h3 id="用户类"><a href="#用户类" class="headerlink" title="用户类"></a>用户类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;shiro_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="meta">@Column(name = &quot;username&quot;, nullable = false, unique = true)</span></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String salt;    <span class="comment">// 密码加盐</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@ManyToMany(fetch = FetchType.EAGER)</span></span><br><span class="line">  <span class="meta">@JoinTable(name = &quot;shiro_user_role&quot;, joinColumns = &#123;@JoinColumn(name = &quot;user_id&quot;)&#125;, inverseJoinColumns = &#123;@JoinColumn(name = &quot;role_id&quot;)&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;User[id = &quot;</span> + id + <span class="string">&quot;, username = &quot;</span> + username + <span class="string">&quot;, password = &quot;</span> + password + <span class="string">&quot;, salt = &quot;</span> + salt + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略 getter 和 setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="角色类"><a href="#角色类" class="headerlink" title="角色类"></a>角色类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;shiro_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ManyToMany</span></span><br><span class="line">  <span class="meta">@JoinTable(name = &quot;shiro_user_role&quot;, joinColumns = &#123;@JoinColumn(name = &quot;role_id&quot;)&#125;, inverseJoinColumns = &#123;@JoinColumn(name = &quot;user_id&quot;)&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ManyToMany</span></span><br><span class="line">  <span class="meta">@JoinTable(name = &quot;shiro_role_permission&quot;, joinColumns = &#123;@JoinColumn(name = &quot;role_id&quot;)&#125;, inverseJoinColumns = &#123;@JoinColumn(name = &quot;permission_id&quot;)&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Permission&gt; permissionList;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Role</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略 getter 和 setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="权限类"><a href="#权限类" class="headerlink" title="权限类"></a>权限类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;shiro_permission&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permission</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String permission;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ManyToMany</span></span><br><span class="line">  <span class="meta">@JoinTable(name = &quot;shiro_role_permission&quot;, joinColumns = &#123;@JoinColumn(name = &quot;permission_id&quot;)&#125;, inverseJoinColumns = &#123;@JoinColumn(name = &quot;role_id&quot;)&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Permission</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略 getter 和 setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="初始化数据库表"><a href="#初始化数据库表" class="headerlink" title="初始化数据库表"></a>初始化数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> shiro_user (id, password, salt, username) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, &quot;dev&quot;, &quot;salt&quot;, &quot;admin&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> shiro_role (id, role) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, &quot;admin&quot;),</span><br><span class="line">  (<span class="number">2</span>, &quot;normal&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> shiro_permission (id, permission) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, &quot;user info&quot;),</span><br><span class="line">  (<span class="number">2</span>, &quot;user add&quot;),</span><br><span class="line">  (<span class="number">3</span>, &quot;user del&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> shiro_user_role (user_id, role_id) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> shiro_role_permission (permission_id, role_id) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="查询接口"><a href="#查询接口" class="headerlink" title="查询接口"></a>查询接口</h3><p>UserRepository:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">  User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他省略。</p>
<h2 id="Shiro-配置"><a href="#Shiro-配置" class="headerlink" title="Shiro 配置"></a>Shiro 配置</h2><p>Apache Shiro 核心通过 Filter 实现，是基于 URL 规则来进行过滤和权限校验。我们通过注入类来进行 Shiro 的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 开启对注解 `<span class="doctag">@RequirePermission</span>` 的支持</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">authorizationAttributeSourceAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自己实现的 Realm，Shiro 的认证最终都交给 Realm 进行执行了。我们需要自己实现一个 Realm，继承自 AuthrozingRealm</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> MyShiroRealm <span class="title function_">myShiroRealm</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyShiroRealm</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityManager <span class="title function_">securityManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    securityManager.setRealm(myShiroRealm());</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);</span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    <span class="comment">// 将 /static 设置为 anon，避免登录后下载 favicon</span></span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    <span class="comment">// authc 表示需要验证身份才能访问，anon 表示不需要</span></span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果不设置，默认 Shiro 会寻找 classpath:/template/login.jsp 文件</span></span><br><span class="line">    shiroFilterFactoryBean.setSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    <span class="comment">// 成功登陆后跳转</span></span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>ShiroFilterFactoryBean</code> 来处理拦截资源文件的问题（单独的 ShiroFilterFactoryBean 配置会出错，因为 Shiro 还需要 SecurityManager）。</p>
<p>ShiroFilterFactory 中已经由 Shiro 官方实现的过滤器（只列举常用的）：</p>
<table>
<thead>
<tr>
<th>Filter Name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>anon</td>
<td>匿名可访问</td>
</tr>
<tr>
<td>authc</td>
<td>需要认证</td>
</tr>
<tr>
<td>user</td>
<td>配置记住我或认证可访问</td>
</tr>
</tbody></table>
<h2 id="Shiro-认证和授权"><a href="#Shiro-认证和授权" class="headerlink" title="Shiro 认证和授权"></a>Shiro 认证和授权</h2><p>Shiro 的认证、授权最终都交给 Realm 来处理，同时在 Shiro 中，用户、角色和权限等信息也是在 Realm 中获取。我们要做的是自定义一个类，继承抽象基类 AuthorizingRealm：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.entity.Permission;</span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.entity.Role;</span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.entity.User;</span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.utils.LogUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro 主要配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 负责授权</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;权限配置：MyShiroRealm.doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">    <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) principalCollection.getPrimaryPrincipal();</span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;为用户 &quot;</span> + user.getUsername() + <span class="string">&quot; 进行权限配置&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Role role : user.getRoleList()) &#123;</span><br><span class="line">      authorizationInfo.addRole(role.getRole());</span><br><span class="line">      <span class="keyword">for</span> (Permission permission : role.getPermissionList()) &#123;</span><br><span class="line">        authorizationInfo.addStringPermission(permission.getPermission());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 负责身份认证</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;开始身份认证&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) authenticationToken.getPrincipal();</span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;输入得到的用户名：&quot;</span> + username);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsername(username);</span><br><span class="line">    <span class="comment">// 从数据库中查找 user</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;用户信息：\n&quot;</span> + user.toString());</span><br><span class="line">    <span class="type">SimpleAuthenticationInfo</span> <span class="variable">authenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(</span><br><span class="line">        user,</span><br><span class="line">        user.getPassword(),</span><br><span class="line">  <span class="comment">//    ByteSource.Util.bytes(user.getSalt()),  如果密码需要加盐验证，需要使用这个构造方法，后面会讲到。</span></span><br><span class="line">        getName()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承 AuthorizingRealm 类需要实现两个方法：doGetAuthorizationInfo() 和 doGetAuthenticationInfo()。<code>doGetAuthorizationInfo()</code> 负责权限管理，即为用户设置允许的权限，<code>doGetAuthenticationInfo()</code> 方法负责身份认证，即检验用户名密码的正确性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleAuthenticationInfo</span> <span class="variable">authenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(</span><br><span class="line">    user,</span><br><span class="line">    user.getPassword(),</span><br><span class="line"><span class="comment">//  ByteSource.Util.bytes(user.getSalt()),  如果密码需要加盐验证，需要使用这个构造方法，后面会讲到。</span></span><br><span class="line">    getName()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>默认使用 <code>CredentialsMatcher</code> 来进行用户名密码确认，如果觉得默认的不好可以自己手动实现，下面讲密码加密存储会涉及到。注释的一行是密码加密时使用的盐，如果是明文密码去掉注释的一行即可。</p>
<p>接下来需要把自定义的 Realm 注入到 SecurityManager 中，代码在 ShiroConfiguration 类中已经实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MyShiroRealm <span class="title function_">myShiroRealm</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyShiroRealm</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityManager <span class="title function_">securityManager</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">  securityManager.setRealm(myShiroRealm());</span><br><span class="line">  <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>经过上面的操作 Shiro 的集成基本已经是完成了，下面进行测试：</p>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.entity.User;</span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> me.xlui.spring.utils.LogUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;HelloController.index&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpServletRequest request, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    LogUtil.getLogger().info(<span class="string">&quot;HelloController.login&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">exception</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;shiroLoginFailure&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (UnknownAccountException.class.getName().equals(exception)) &#123;</span><br><span class="line">        LogUtil.getLogger().info(<span class="string">&quot;账户不存在！&quot;</span>);</span><br><span class="line">        msg = <span class="string">&quot;账户不存在&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IncorrectCredentialsException.class.getName().equals(exception)) &#123;</span><br><span class="line">        <span class="comment">// 实际应用的时候写 &quot;用户名或密码错误&quot;</span></span><br><span class="line">        LogUtil.getLogger().info(<span class="string">&quot;密码不正确！&quot;</span>);</span><br><span class="line">        msg = <span class="string">&quot;密码错误&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LogUtil.getLogger().info(<span class="string">&quot;发生异常：&quot;</span> + exception);</span><br><span class="line">        msg = <span class="string">&quot;其他异常&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是 Index 页！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">错误信息：<span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;autofocus&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行项目，访问 <a href="http://localhost:8080/%E3%80%82">http://localhost:8080/。</a></p>
<h2 id="密码加盐加密存储"><a href="#密码加盐加密存储" class="headerlink" title="密码加盐加密存储"></a>密码加盐加密存储</h2><p>实际应用中我们往往不会直接明文存储密码，因为这样非常不安全。而单纯的使用 MD5、SHA 之类的算法加密密码会存在数据库中两个密码相同用户的 <code>password</code> 字段也相同的情况，这样也很容易被撞库攻击。一种更安全的方式是加盐加密。</p>
<p>加盐加密的思路是在使用 MD5、SHA 之类算法的时候在用户的密码字段加一个随机、唯一的字符串（盐），这样生成的加密密码串几乎不可能存在相同的。即使是两个相同的密码，因为盐的不同，生成的密码串也是万万不同的。</p>
<h3 id="生成加盐密码串"><a href="#生成加盐密码串" class="headerlink" title="生成加盐密码串"></a>生成加盐密码串</h3><p>我采用的是访问特定 url 生成加盐密码串存储，实际应用的时候可以直接在用户注册或者修改密码的时候生成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/en&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">  user.setSalt(user.getUsername());</span><br><span class="line">  user.setPassword((<span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;MD5&quot;</span>, user.getPassword(), ByteSource.Util.bytes(user.getSalt()), <span class="number">1024</span>)).toString());</span><br><span class="line">  userRepository.save(user);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;succ&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SimpleHash</code> 是 Shiro 提供给我们的加密类，第一个参数是加密算法名，第二个参数是原密码，第三个参数是盐，因为在 Realm 中向 <code>SimpleAuthenticationInfo</code> 类传递参数时需要 ByteSource 类实例，所以我们在这里使用了相同的格式。实际上 SimpleHash 类对盐的具体类型没有要求，其形参的类型是 Object。第四个参数是加密的次数。</p>
<p>我们用自己的方式生成了加盐加密的密码串，接下来还需要告诉 Shiro 使用这种方式验证。</p>
<h3 id="注入加密方式"><a href="#注入加密方式" class="headerlink" title="注入加密方式"></a>注入加密方式</h3><p>本来我们应该编写一个加密算法类，但是 Shiro 已经替我们实现了，<code>HashedCredentialsMatcher</code>，我们只需要注入使用即可。有两种使用方式：</p>
<p>（1）重写 <code>MyShiroRealm</code>（自定义 Realm 类）的 <code>setCredentialsMatcher</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCredentialsMatcher</span><span class="params">(CredentialsMatcher credentialsMatcher)</span> &#123;</span><br><span class="line">    <span class="comment">// 重写 setCredentialsMatcher 方法为自定义的 Realm 设置 hash 验证方法</span></span><br><span class="line">    <span class="type">HashedCredentialsMatcher</span> <span class="variable">hashedCredentialsMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">    hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    hashedCredentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">super</span>.setCredentialsMatcher(hashedCredentialsMatcher);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）在 <code>ShiroConfiguration</code> 中注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> HashedCredentialsMatcher <span class="title function_">hashedCredentialsMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HashedCredentialsMatcher</span> <span class="variable">hashedCredentialsMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">    hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">    hashedCredentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> MyShiroRealm <span class="title function_">myShiroRealm</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MyShiroRealm</span> <span class="variable">myShiroRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyShiroRealm</span>();</span><br><span class="line">    myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">    <span class="keyword">return</span> myShiroRealm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方法无太大优劣，都可以成功告知 Shiro 使用这种方式进行加盐密码验证。</p>
<p>如果觉得默认的 <code>HashedCredentialsMatcher</code> 不好，可以自己动手实现一个，继承 <code>CredentialsMatcher</code> 接口，然后按照上面的方法集成即可。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>运行程序，访问 <code>http://localhost:8080/en</code>，跳转到登录，登录后返回，对密码进行加盐存储。</p>
<p>查看数据库中用户表相应字段是否更新。</p>
<p>关闭浏览器，重新访问 <code>http://localhost:8080</code> 使用原用户名密码成功登录。</p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>Spring Boot 和 Shiro 似乎存在一些问题。我一般开发的时候都在配置文件（application.properties）中这样设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=create</span><br></pre></td></tr></table></figure>

<p>然后再 classpath 也就是 src&#x2F;main&#x2F;resources 下新建 data.sql。这样 Spring Boot 在启动的时候就会删除所有相关表重建并且执行 data.sql 中的语句进行初始化。</p>
<p>但是在使用 Shiro 的情况下 data.sql 一直无法成功执行。Google 和 StackOverflow 都没有发现理想的回答[摊手]。</p>
<p>还有就是关于密码加盐存储这一点，百度到的博客基本就是抄来抄去，大部分只提了如何给密码加盐，基本没提到加盐存储之后 Shiro 如何验证。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源代码已经上传 GitHub：<a href="https://github.com/xlui/Spring-Boot-Examples/tree/master/spring-boot-shiro">https://github.com/xlui/Spring-Boot-Examples/tree/master/spring-boot-shiro</a>。如果对你有所帮助，不妨留个 star 再走。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 项目打包并部署到 Tomcat、Tomcat 同时部署多应用</title>
    <url>//posts/spring-boot-project-package-and-deploy/</url>
    <content><![CDATA[<p>Spring Boot 项目开发完毕后，需要部署到 tomcat 服务器下，鉴于经常忘记部署流程，特地写了一篇博客来记录。</p>
<span id="more"></span>

<h1 id="打包为-war"><a href="#打包为-war" class="headerlink" title="打包为 war"></a>打包为 war</h1><h2 id="修改-packaging"><a href="#修改-packaging" class="headerlink" title="修改 packaging"></a>修改 packaging</h2><p>基于 Intellij IDEA 构建项目有一个好处是大多数东西它已经自动帮你设置好了，不需要太多修改的地方。</p>
<p>修改 <code>pom.xml</code> 中的打包格式：</p>
<p><code>&lt;packaging&gt;jar&lt;/packaging&gt;</code> –&gt; <code>&lt;packaging&gt;war&lt;/packaging&gt;</code></p>
<h2 id="插件与组件"><a href="#插件与组件" class="headerlink" title="插件与组件"></a>插件与组件</h2><p>有的博客中提到了 build 组件和 tomcat 插件（<code>pom.xml</code> 中)，在 Intellij IDEA 生成的 pom 中并没有这些东西，所以可以直接跳过。</p>
<h2 id="注册启动类"><a href="#注册启动类" class="headerlink" title="注册启动类"></a>注册启动类</h2><p>修改 Application 类，继承 <code>SpringBootServletInitializer</code> 并重写 <code>configure</code> 方法，在方法中注册启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>选择 Intellij IDEA 的 Build -&gt; Build Artifacts -&gt; ProjectName: war -&gt; Build，就会在项目根目录的 target 文件夹下生成：项目名+版本号.war。</p>
<h1 id="Tomcat-同时部署多应用"><a href="#Tomcat-同时部署多应用" class="headerlink" title="Tomcat 同时部署多应用"></a>Tomcat 同时部署多应用</h1><p>有时候受限于服务器资源，我们可能希望 Tomcat 同时运行多个应用。有两种解决方案：一种是单一 tomcat，通过配置文件同时服务多个应用；另一种是多个 tomcat，各个应用互不影响，但是比较麻烦。我们采用第一种方案。</p>
<p>Tomcat 默认的配置文件在 <code>/path/to/tomcat/conf/server.xml</code></p>
<p>单一 tomcat 运行多应用的关键就是在 server.xml 中配置多个 Service。</p>
<h2 id="默认的-Tomcat-Service"><a href="#默认的-Tomcat-Service" class="headerlink" title="默认的 Tomcat Service"></a>默认的 Tomcat Service</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span> <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;java_dx_style_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要让 Tomcat 同时运行多应用，我们只需要新增 Service。</p>
<h2 id="新增-Service"><a href="#新增-Service" class="headerlink" title="新增 Service"></a>新增 Service</h2><p>新增 Service 有几点需要注意的：</p>
<ul>
<li>Service name 不能与原来的 <code>Catalina</code> 相同</li>
<li>HTTP port 和 AJP port 不能与原来的相同</li>
<li>Engine name 不能与原来的相同</li>
<li>Host 的 appBase 属性不能与原来的相同</li>
</ul>
<p>以下是一个示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;newService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8010&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;newService&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span> <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;newService&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;eros_dx_style_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改完成后重启 Tomcat，部署新应用到上面配置文件指示的 <code>/path/to/tomcat/newService</code> 文件夹下即可。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>deployment</tag>
        <tag>java</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理之 Chomsky 文法的判断 —— Java 实现</title>
    <url>//posts/compiling-principle-chomsky/</url>
    <content><![CDATA[<p>文法的定义和记号</p>
<p>$$ G &#x3D; (V_N, V_T, P, S) \qquad (V_N \cap V_T &#x3D; \varnothing, V_N \cup V_T &#x3D; V) $$</p>
<p>是 N.Chomsky 在 1956 年描述形式语言时首先给出的。同时，Chomsky 还对产生式的形式给以不同的限制而定义了四类基本的文法，分别称之为 0 型文法，1 型文法，2 型文法和 3 型文法。</p>
<span id="more"></span>

<h2 id="明确定义"><a href="#明确定义" class="headerlink" title="明确定义"></a>明确定义</h2><ul>
<li>0 型文法：对任一产生式 $\alpha \to \beta$，都有 $\alpha \in V^+, \quad \beta \in V^*$</li>
<li>1 型文法：对任一产生式 $\alpha \to \beta$，都有 $\mid\beta\mid \ge \mid\alpha\mid, \quad \alpha,\beta \in V^+$，仅仅 $\alpha \to \epsilon$ 除外</li>
<li>2 型文法：对任一产生式 $A \to \beta$，都有 $A \in V_N, \quad \beta \in V^+$</li>
<li>3 型文法：任一产生式都形如 $A \to Ba$ 或 $A \to a$，其中 $A,B \in V_N, \quad a \in V_T$，该文法称为右线性文法。类似可定义左线性文法。</li>
</ul>
<h2 id="判断思路"><a href="#判断思路" class="headerlink" title="判断思路"></a>判断思路</h2><h3 id="0-型文法"><a href="#0-型文法" class="headerlink" title="0 型文法"></a>0 型文法</h3><ul>
<li><p>字符串 $\alpha$ 的范围是 $V^+$，是全符号集的一个正闭包，即符号集中所有符号的任意组合，且不包含 $\epsilon$ 元素</p>
</li>
<li><p>字符串 $\beta$ 的范围是 $V^*$，是全符号集的自反传递闭包，也即 $V^+ \cup {\epsilon}$</p>
</li>
<li><p>要判断一个文法是否是 0 型文法，只需要判断<strong>左侧非空且不全为小写</strong>即可</p>
</li>
<li><p>任何 0 型语言都是递归可枚举的，故 0 型语言又称<strong>递归可枚举集</strong></p>
</li>
</ul>
<h3 id="1-型文法"><a href="#1-型文法" class="headerlink" title="1 型文法"></a>1 型文法</h3><ul>
<li><p>首先 1 型文法必须是 0 型文法</p>
</li>
<li><p>1 型文法除了 $\alpha \to \epsilon$ 这个特例外，其他情况都满足 <strong>$\beta$ 的长度大于 $\alpha$ 的长度</strong></p>
</li>
<li><p>1 型文法也叫<strong>上下文相关（敏感）文法</strong></p>
</li>
</ul>
<h3 id="2-型文法"><a href="#2-型文法" class="headerlink" title="2 型文法"></a>2 型文法</h3><ul>
<li><p>首先 2 型文法必须是 1 型文法</p>
</li>
<li><p>2 型文法<strong>左侧必须是一个非终结符</strong></p>
</li>
<li><p>2 型文法也叫<strong>上下文无关文法</strong></p>
</li>
</ul>
<h3 id="3-型文法"><a href="#3-型文法" class="headerlink" title="3 型文法"></a>3 型文法</h3><ul>
<li><p>首先 3 型文法必须是 2 型文法</p>
</li>
<li><p>3 型文法必须满足以下两种形式之一</p>
</li>
</ul>
<ol>
<li>$A \to aB$ 或 $A \to a$</li>
<li>$A \to Ba$ 或 $A \to a$</li>
</ol>
<ul>
<li>3 型文法也叫正规文法</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="保存产生式集"><a href="#保存产生式集" class="headerlink" title="保存产生式集"></a>保存产生式集</h3><p>可以使用 <code>List</code> 来保存所有产生式，用内部类来表示具体的产生式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chomsky</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Producer&gt; producers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">        String left;</span><br><span class="line">        String right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(String left, String right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断-0-型文法"><a href="#判断-0-型文法" class="headerlink" title="判断 0 型文法"></a>判断 0 型文法</h3><p>遍历产生式集，如果有一个产生式不符合条件，则直接退出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isZero</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (producer.left.length() == <span class="number">0</span> || producer.left.equals(producer.left.toLowerCase())) &#123;</span><br><span class="line">            <span class="comment">// 判断产生式的左部是否为空或者全部是小写，如果是则不是 0 型文法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于判断左部是否全为小写，使用 <code>String.toLowerCase()</code> 将其转换为小写后再与原产生式比较，相等则原产生式为小写。</p>
<h3 id="判断-1-型文法"><a href="#判断-1-型文法" class="headerlink" title="判断 1 型文法"></a>判断 1 型文法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFirst</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isZero()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (producer.right.length() != <span class="number">0</span> &amp;&amp; producer.right.length() &lt; producer.left.length()) &#123;</span><br><span class="line">                <span class="comment">// 1 型文法必须右部长度大于左部，除了右部为ε的情况</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1 型文法必须先是 0 型文法。</p>
<p>1 型文法的判断跳过了右部为 $\epsilon$ 的情况，即允许右部为 $\epsilon$。</p>
<h3 id="判断-2-型文法"><a href="#判断-2-型文法" class="headerlink" title="判断 2 型文法"></a>判断 2 型文法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSecond</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFirst()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (producer.left.length() != <span class="number">1</span> || producer.left.matches(<span class="string">&quot;[a-z]&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 2 型文法左部必须为 1，且左部为 1 时不能为非终结符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2 型文法必须先是 1 型文法。</p>
<p>首先限制左部长度必须为 1，然后利用正则判断是否为小写，<code>[a-z]</code> 匹配一个小写字符。</p>
<h3 id="判断-3-型文法"><a href="#判断-3-型文法" class="headerlink" title="判断 3 型文法"></a>判断 3 型文法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isThird</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSecond()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">countLeft</span> <span class="operator">=</span> <span class="number">0</span>, countRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (producer.right.matches(<span class="string">&quot;[A-Z]?[a-z]&quot;</span>)) &#123;</span><br><span class="line">                countLeft++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (producer.right.matches(<span class="string">&quot;[a-z][A-Z]?&quot;</span>)) &#123;</span><br><span class="line">                countRight++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (countLeft == producers.size()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此文法是 3 型文法，并且是左线性文法！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (countRight == producers.size()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此文法是 3 型文法，并且是右线性文法！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 型文法必须先是 2 型文法。</p>
<h2 id="全部源代码"><a href="#全部源代码" class="headerlink" title="全部源代码"></a>全部源代码</h2><p>Chomsky.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chomsky</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Producer&gt; producers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Producer producer)</span> &#123;</span><br><span class="line">        producers.add(producer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isZero</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (producer.left.length() == <span class="number">0</span> || producer.left.equals(producer.left.toLowerCase())) &#123;</span><br><span class="line">                <span class="comment">// 判断产生式的左部是否为空或者全部是小写，如果是则不是 0 型文法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isZero()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (producer.right.length() != <span class="number">0</span> &amp;&amp; producer.right.length() &lt; producer.left.length()) &#123;</span><br><span class="line">                    <span class="comment">// 1 型文法必须右部长度大于左部，除了右部为ε的情况</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSecond</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFirst()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (producer.left.length() != <span class="number">1</span> || producer.left.matches(<span class="string">&quot;[a-z]&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 2 型文法左部必须为 1，且左部为 1 时不能为非终结符</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isThird</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSecond()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">countLeft</span> <span class="operator">=</span> <span class="number">0</span>, countRight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Producer producer : producers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (producer.right.matches(<span class="string">&quot;[A-Z]?[a-z]&quot;</span>)) &#123;</span><br><span class="line">                    countLeft++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (producer.right.matches(<span class="string">&quot;[a-z][A-Z]?&quot;</span>)) &#123;</span><br><span class="line">                    countRight++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (countLeft == producers.size()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此文法是 3 型文法，并且是左线性文法！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (countRight == producers.size()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此文法是 3 型文法，并且是右线性文法！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断文法的具体类型，从 3 到 0 逐步判断</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isThird()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSecond()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此文法是 2 型文法&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFirst()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此文法是 1 型文法&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isZero()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此文法是 0 型文法&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此文法不是 0 型文法！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">        String left;</span><br><span class="line">        String right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(String left, String right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        String[] input;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Chomsky</span> <span class="variable">chomsky</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chomsky</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入产生式的个数:&quot;</span>);</span><br><span class="line">        count = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入产生式（示例：A-&gt;ab，一行一个）：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            input = scanner.next().split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                chomsky.add(<span class="keyword">new</span> <span class="title class_">Producer</span>(input[<span class="number">0</span>], input[<span class="number">1</span>]));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入非法，请重新运行程序！！！&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chomsky.test();</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Travis CI 自动测试、部署 Java Web 项目到 Tomcat</title>
    <url>//posts/travis-tomcat/</url>
    <content><![CDATA[<p><img src="/img/tech/travis.png" alt="Travis CI" title="Travis CI"></p>
<span id="more"></span>

<p>上一个项目的部署测试流程是：本地写完，本地测试，打包为 war 上传到服务器，服务器部署到 Tomcat 指定目录下，重启 Tomcat。这一套流程下来少说十分钟，而且如果刚上传完发现有 bug 的话，还要本地改完重新再来一遍。</p>
<p>重复这样的过程让人心神俱疲，好在现在已经有成熟的解决方案如 Travis CI、Jenkins等，今天我们就尝试着在 Java Web 项目中运用 Travis CI 来自动测试、部署、重启。</p>
<p>Travis CI 是软件开发领域一个在线的、分布式的持续集成服务，它与 GitHub 的协作相当紧密，并且对开源项目免费。</p>
<h2 id="注册配置-Travis"><a href="#注册配置-Travis" class="headerlink" title="注册配置 Travis"></a>注册配置 Travis</h2><p>到 Travis 的官网 <a href="https://travis-ci.org/">https://travis-ci.org</a> 注册登录，其实是用 GitHub 做第三方授权登录，十分简单。</p>
<p><img src="/img/tech/travis-register.png" alt="Travis Register" title="Travis Registeration Page"></p>
<p>注册成功后进入个人 Profile 页，选择一个需要集成 Travis CI 的项目，开启 Build 即可。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>本文我们以一个简单的 Spring Boot 项目为例：</p>
<h3 id="项目目录树"><a href="#项目目录树" class="headerlink" title="项目目录树"></a>项目目录树</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  .travis.yml</span><br><span class="line">│  LICENSE</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">└─Hello</span><br><span class="line">    │  .gitignore</span><br><span class="line">    │  HelloTravisCI.iml</span><br><span class="line">    │  mvnw</span><br><span class="line">    │  mvnw.cmd</span><br><span class="line">    │  pom.xml</span><br><span class="line">    │</span><br><span class="line">    ├─.idea</span><br><span class="line">    │  └─....</span><br><span class="line">    │</span><br><span class="line">    ├─.mvn</span><br><span class="line">    │  └─wrapper</span><br><span class="line">    │          maven-wrapper.jar</span><br><span class="line">    │          maven-wrapper.properties</span><br><span class="line">    │</span><br><span class="line">    ├─src</span><br><span class="line">    │  ├─main</span><br><span class="line">    │  │  ├─java</span><br><span class="line">    │  │  │  └─me</span><br><span class="line">    │  │  │      └─xlui</span><br><span class="line">    │  │  │          └─spring</span><br><span class="line">    │  │  │                  Application.java</span><br><span class="line">    │  │  │                  HelloController.java</span><br><span class="line">    │  │  │</span><br><span class="line">    │  │  └─resources</span><br><span class="line">    │  │      │  application.properties</span><br><span class="line">    │  │      │</span><br><span class="line">    │  │      ├─static</span><br><span class="line">    │  │      └─templates</span><br><span class="line">    │  └─test</span><br><span class="line">    │      └─java</span><br><span class="line">    │          └─me</span><br><span class="line">    │              └─xlui</span><br><span class="line">    │                  └─spring</span><br><span class="line">    │                          ApplicationTests.java</span><br><span class="line">    │</span><br><span class="line">    └─target</span><br><span class="line">        └─....</span><br></pre></td></tr></table></figure>

<h3 id="HelloController"><a href="#HelloController" class="headerlink" title="HelloController"></a>HelloController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;html&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;title&gt;Test Page&lt;/title&gt;&lt;/head&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;body&gt;&lt;div align=\&quot;center\&quot;&gt;Hello World!&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div align=\&quot;center\&quot;&gt;This website shows you have successfully integrated &lt;b&gt;Travis-CI&lt;/b&gt;&lt;/div&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.xlui.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a simple test, and you pass it.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加-travis-yml"><a href="#添加-travis-yml" class="headerlink" title="添加 .travis.yml"></a>添加 .travis.yml</h2><p>Travis 需要根据项目中 <code>.travis.yml</code> 文件中的配置信息来执行相应的动作。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">java</span></span><br><span class="line"><span class="attr">jdk:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">openjdk8</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">cd</span> <span class="string">Hello</span> <span class="string">&amp;&amp;</span> <span class="string">mvn</span> <span class="string">install</span> <span class="string">-DskipTests=true</span> <span class="string">-Dmaven.javadoc.skip=true</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">mvn</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<p>注意 <strong>install</strong> 的一行，根据目录树，我们的项目是在 Hello 目录下的，所以 install 的时候需要先切换到 Hello 目录中，否则 Maven 会找不到 <code>pom.xml</code> 进而构建失败。</p>
<h2 id="触发构建"><a href="#触发构建" class="headerlink" title="触发构建"></a>触发构建</h2><p>提交并 push 到 GitHub 后，Travis就会自动构建这个 Maven 工程，可以在 Travis 上看到构建结果和过程中的详细输出：</p>
<p><img src="/img/tech/travis-build.png" alt="Travis Build" title="Travis Build"></p>
<h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>现在 Travis 已经可以根据我们的提交自动执行构建过程了，下一步就是部署到远程服务器。 Travis 提供 <code>after_success</code> 来实现这个步骤。</p>
<p>不过在此之前有一件事需要处理，因为我们要部署到服务器，势必需要 Travis 登录远程服务器，因为是开源项目，我们应该怎么解决登录密码问题？</p>
<h3 id="加密登录密码"><a href="#加密登录密码" class="headerlink" title="加密登录密码"></a>加密登录密码</h3><p>Travis Docs 提供了这个问题的<a href="https://docs.travis-ci.com/user/encrypting-files/">解决方案</a>，我们一起来实践一下：</p>
<p><strong>以下操作完全是在本地！！！</strong></p>
<p>首先通过 ruby 的 gem 安装 travis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 ruby</span></span><br><span class="line"><span class="built_in">sudo</span> yum install ruby ruby-devel</span><br><span class="line"><span class="comment"># 更新 gem</span></span><br><span class="line"><span class="built_in">sudo</span> gem update --system</span><br><span class="line"><span class="comment"># 添加 ruby-china 源</span></span><br><span class="line"><span class="built_in">sudo</span> gem sources --add https://gems.ruby-china.org/</span><br><span class="line"><span class="comment"># 安装 travis</span></span><br><span class="line"><span class="built_in">sudo</span> gem install travis</span><br></pre></td></tr></table></figure>

<p>接下来在命令行登录 travis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ travis login</span><br><span class="line">We need your GitHub login to identify you.</span><br><span class="line">This information will not be sent to Travis CI, only to api.github.com.</span><br><span class="line">The password will not be displayed.</span><br><span class="line"></span><br><span class="line">Try running with --github-token or --auto <span class="keyword">if</span> you don<span class="string">&#x27;t want to enter your password anyway.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Username: xlui</span></span><br><span class="line"><span class="string">Password for xlui: *********************</span></span><br><span class="line"><span class="string">Two-factor authentication code for xlui: ******</span></span><br><span class="line"><span class="string">Successfully logged in as xlui!</span></span><br></pre></td></tr></table></figure>

<p>输入 GitHub 用户名、密码、两步认证码（如果开启了的话）。</p>
<p>将目录切换到项目根目录，因为我们要让 travis 远程登录自己的服务器，所以需要将本地保存的 SSH 私钥进行加密处理。（默认大家都是通过 ssh 登录服务器）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> test-travis-ci/</span><br><span class="line">$ travis encrypt-file ~/.ssh/id_rsa --add</span><br><span class="line">Detected repository as xlui/test-travis-ci, is this correct? |<span class="built_in">yes</span>| <span class="built_in">yes</span></span><br><span class="line">encrypting ~/.ssh/id_rsa <span class="keyword">for</span> xlui/test-travis-ci</span><br><span class="line">storing result as id_rsa.enc</span><br><span class="line">storing secure <span class="built_in">env</span> variables <span class="keyword">for</span> decryption</span><br><span class="line"></span><br><span class="line">Make sure to add id_rsa.enc to the git repository.</span><br><span class="line">Make sure not to add ~/.ssh/id_rsa to the git repository.</span><br><span class="line">Commit all changes to your .travis.yml.</span><br></pre></td></tr></table></figure>

<p>这个时候查看 <code>.travis.yml</code> 会发现多出了几行：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_9655a05d2431_key</span> <span class="string">-iv</span> <span class="string">$encrypted_9655a05d2431_iv</span></span><br><span class="line">  <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~\/.ssh/id_rsa</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure>

<p>为了保证权限正常，我们多加一行设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_9655a05d2431_key</span> <span class="string">-iv</span> <span class="string">$encrypted_9655a05d2431_iv</span></span><br><span class="line">  <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure>

<p>同时，因为 travis 第一次登录远程服务器的时候会出现 SSH 主机验证，我们无法控制交互，所以要添加 addons 配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> <span class="string">your_ip_addr:port</span></span><br></pre></td></tr></table></figure>

<p>注意，如果你的服务器 ssh 端口是开在 <code>22</code> 的（<strong>强烈不推荐</strong>），上面的值可以只是 <code>your_ip_addr</code>。如果不是开在 22 端口，就要按照上面的格式自己填充。</p>
<p>这样配置完成后，travis 就可以免密登录自己的服务器了。</p>
<h3 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h3><p>既然已经可以免密登录服务器了，那么我们写一个部署脚本，在登录的时候自动执行即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Auto Deploy Success&quot;</span> &gt;&gt; a.log</span><br></pre></td></tr></table></figure>

<p>记得要给脚本添加执行权限（x）。</p>
<h3 id="执行部署脚本"><a href="#执行部署脚本" class="headerlink" title="执行部署脚本"></a>执行部署脚本</h3><p>在 <code>.travis.yml</code> 中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">your-username@your_ip_addr</span> <span class="string">-p</span> <span class="string">your_port</span> <span class="string">&quot;./your_shell-script.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>将其中的 <code>your-username</code>, <code>your_id_addr</code>, <code>your_port</code>, <code>your_shell_script</code> 替换成自己的即可。</p>
<h2 id="自动部署项目到-Tomcat"><a href="#自动部署项目到-Tomcat" class="headerlink" title="自动部署项目到 Tomcat"></a>自动部署项目到 Tomcat</h2><p>上面的设置完成后，我们已经可以让 travis 在测试完成后自动执行服务器上的脚本了，如果想自动部署到 Tomcat 我们只需要自己编写脚本即可。因为各自使用的 Tomcat 配置都有差别，就不再举例。</p>
<h2 id="在项目中添加-badge"><a href="#在项目中添加-badge" class="headerlink" title="在项目中添加 badge"></a>在项目中添加 badge</h2><p>点击 Travis 网站中 <code>buid</code> badge，选择 Markdown，将代码复制到项目 README 中即可看到 <code>build:passing</code> 的Badge。</p>
<p><img src="/img/tech/travis-badge.png" alt="Travis Badge" title="Travis Badge"></p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊延时任务队列</title>
    <url>//posts/delayed-task-queue/</url>
    <content><![CDATA[<p>延时队列，顾名思义，是为了让一些任务不立即执行，放到队列里面等到特定时间后再执行。常用的场景有：</p>
<ul>
<li>订单一直处于未支付状态，需要及时关闭订单，并退还库存</li>
<li>用户通过遥控设备控制智能设备在指定时间进行工作</li>
<li>eFuture 中未来邮件需要在用户指定的时间点发送</li>
</ul>
<span id="more"></span>

<p><a href="https://github.com/xlui/eFuture/">eFuture</a> 是我最近刚完成的一个项目，主要目的是提供“未来邮件”的服务。其中，邮件需要被存储并且需要在特定时间点发送。于是我就需要一个延时队列来保存发信任务，并在指定时间由程序消费任务，从而发送邮件。</p>
<p>对于 eFuture 来说，有两件事是最重要的：</p>
<ol>
<li>未来邮件在延时任务队列中保存，并且不会因为系统故障（如突发停机）而丢失</li>
<li>未来邮件需要在指定日期被取出并消费掉（发送出）</li>
</ol>
<p>这两点需求意味着，提供延时任务的组件需要具备容灾能力，所以常用的 Java 内部的实现就不行了（虽说我也没用 Java 来写这个项目）。一番搜索之后，发现常用的实现有两个符合我的要求：RabbitMQ 与 Redis。</p>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ 本身并没有直接支持延时队列功能，但是我们可以通过 RabbitMQ 队列的特性模拟出延时队列的功能。</p>
<p>RabbitMQ 在创建 Queue 的时候可以指定一个 <code>x-dead-letter-exchange</code> 的选项，指定该选项后， Queue 中过期的消息都将自动转发到相应的 Exchange。我们只需要在对应的 Exchange 上绑定接收过期任务的队列即可。</p>
<p><img src="/img/tech/dlx.png" alt="Dead Letter eXchange" title="引用一张相关博客的图片"></p>
<p>Python 代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port=<span class="number">5672</span>,</span><br><span class="line">    virtual_host=<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    credentials=pika.PlainCredentials(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">))</span><br><span class="line">channel = connection.channel()</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s [%(levelname)s] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%H:%M:%S&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel.exchange_delete(<span class="string">&#x27;msg.exchange&#x27;</span>)</span><br><span class="line">channel.queue_delete(<span class="string">&#x27;msg.queue.dead&#x27;</span>)</span><br><span class="line">channel.queue_delete(<span class="string">&#x27;msg.queue.task&#x27;</span>)</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(<span class="string">&#x27;msg.exchange&#x27;</span>)</span><br><span class="line">channel.queue_declare(<span class="string">&#x27;msg.queue.dead&#x27;</span>, arguments=&#123;<span class="string">&#x27;x-dead-letter-exchange&#x27;</span>: <span class="string">&#x27;msg.exchange&#x27;</span>&#125;)</span><br><span class="line">channel.queue_declare(<span class="string">&#x27;msg.queue.task&#x27;</span>)</span><br><span class="line">channel.queue_bind(queue=<span class="string">&#x27;msg.queue.task&#x27;</span>, exchange=<span class="string">&#x27;msg.exchange&#x27;</span>, routing_key=<span class="string">&#x27;msg.queue.dead&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上面这段代码主要做了：</p>
<ul>
<li>利用 <a href="https://pika.readthedocs.io/en/stable/">pika</a> 连接到 RabbitMQ</li>
<li>配置 logging</li>
<li>清除已有的同名 Exchange 与 Queue</li>
<li>创建 Exchange 与 Queue 并对其中一个队列设置 <code>dead-letter-exchange</code>。</li>
</ul>
<p>下面开始测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        logging.info(<span class="string">&#x27;push &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        channel.publish(</span><br><span class="line">            exchange=<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">            routing_key=<span class="string">&#x27;msg.queue.dead&#x27;</span>, </span><br><span class="line">            body=<span class="string">&quot;hello, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i),</span><br><span class="line">            properties=pika.spec.BasicProperties(content_type=<span class="string">&quot;text/plain&quot;</span>, expiration=<span class="built_in">str</span>(<span class="number">1000</span> * i))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>():</span><br><span class="line">    <span class="keyword">for</span> method, properties, body <span class="keyword">in</span> channel.consume(<span class="string">&#x27;msg.queue.task&#x27;</span>):</span><br><span class="line">        logging.info(<span class="string">&#x27;receive &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(body))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tPush = threading.Thread(target=push)</span><br><span class="line">    tPop = threading.Thread(target=pop)</span><br><span class="line">    logging.info(<span class="string">&#x27;start push...&#x27;</span>)</span><br><span class="line">    tPush.start()</span><br><span class="line">    logging.info(<span class="string">&#x27;start pop...&#x27;</span>)</span><br><span class="line">    tPop.start()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>push</code> 依次向 RabbitMQ 的 <code>msg.queue.dead</code> 中发布了 <code>hello, 1</code>, <code>hello, 2</code>, <code>hello, 3</code>, <code>hello, 4</code>, <code>hello, 5</code>，其中 <code>hello, i</code> 的过期时间为 <code>i</code> 秒。</li>
<li><code>pop</code> 监听 RabbitMQ 的 <code>msg.queue.task</code>，一旦其中有数据就将其取出进行消费。</li>
</ul>
<p>运行一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15:00:50 [INFO] start push...</span><br><span class="line">15:00:50 [INFO] push 1</span><br><span class="line">15:00:50 [INFO] start pop...</span><br><span class="line">15:00:50 [INFO] push 2</span><br><span class="line">15:00:50 [INFO] push 3</span><br><span class="line">15:00:50 [INFO] push 4</span><br><span class="line">15:00:50 [INFO] push 5</span><br><span class="line">15:00:51 [INFO] receive b<span class="string">&#x27;hello, 1&#x27;</span></span><br><span class="line">15:00:52 [INFO] receive b<span class="string">&#x27;hello, 2&#x27;</span></span><br><span class="line">15:00:53 [INFO] receive b<span class="string">&#x27;hello, 3&#x27;</span></span><br><span class="line">15:00:54 [INFO] receive b<span class="string">&#x27;hello, 4&#x27;</span></span><br><span class="line">15:00:55 [INFO] receive b<span class="string">&#x27;hello, 5&#x27;</span></span><br></pre></td></tr></table></figure>

<p>看起来我们似乎成功实现了延迟任务队列，在上面的测试用例下这个队列也工作的很好。但是，上面的实现中却有一个致命缺陷，我们把 <code>push</code> 函数稍稍修改一下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>():</span><br><span class="line">    <span class="comment"># for i in range(1, 6):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        logging.info(<span class="string">&#x27;push &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        channel.publish(</span><br><span class="line">            exchange=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            routing_key=<span class="string">&#x27;msg.queue.dead&#x27;</span>,</span><br><span class="line">            body=<span class="string">&quot;hello, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i),</span><br><span class="line">            properties=pika.spec.BasicProperties(content_type=<span class="string">&quot;text/plain&quot;</span>, expiration=<span class="built_in">str</span>(<span class="number">1000</span> * i))</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>再次运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15:02:47 [INFO] start push...</span><br><span class="line">15:02:47 [INFO] push 5</span><br><span class="line">15:02:47 [INFO] start pop...</span><br><span class="line">15:02:47 [INFO] push 4</span><br><span class="line">15:02:47 [INFO] push 3</span><br><span class="line">15:02:47 [INFO] push 2</span><br><span class="line">15:02:47 [INFO] push 1</span><br><span class="line">15:02:52 [INFO] receive b<span class="string">&#x27;hello, 5&#x27;</span></span><br><span class="line">15:02:52 [INFO] receive b<span class="string">&#x27;hello, 4&#x27;</span></span><br><span class="line">15:02:52 [INFO] receive b<span class="string">&#x27;hello, 3&#x27;</span></span><br><span class="line">15:02:52 [INFO] receive b<span class="string">&#x27;hello, 2&#x27;</span></span><br><span class="line">15:02:52 [INFO] receive b<span class="string">&#x27;hello, 1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，我们只是把插入消息的顺序调整了一下，队列就失去了作用。在新的 <code>push</code> 函数中，我们把过期时间长的任务先插入队列 <code>msg.queue.dead</code>，可以看到，只有在第一个消息过期并被转发到 <code>msg.queue.task</code> 后，后面的过期的消息才会被处理。</p>
<p>换言之，如果在 <code>msg.queue.dead</code> 中存在先后两个 task，第一个 task 过期时间 10s，第二个过期时间 1s，两个 task 是同时插入队列的。那么只有等第一个 task 过期从队列里移出后，第二个 task 才会被处理，<strong>尽管它在第一个 task 过期前就已经过期了</strong>。从中我们也可以看出 RabbitMQ 对于声明了 <code>x-dead-letter-exchange</code> 的队列中过期消息的处理策略：只检测最前面一个消息是否过期，如果过期就转发到指定的 Exchange，如果没有过期就不作任何处理。</p>
<p>RabbitMQ 的这种特性显然与我们的需求是相悖的，我们需要的是队列头元素始终是最接近过期的，所以我又将目光转向了 Redis。</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis 内部也没有对延时队列做支持，我们需要使用 Redis 的 <code>zset</code> 来手动实现。ZSet 是 Redis 内置的数据结构之一，其特性是值依据对应的 score 排序，内部使用 HashMap 与 SkipList 来存储数据并保证有序，HashMap 中存放的是值到 score 的映射，SkipList 中存放的是所有值，排序依据是 score。</p>
<p>利用 Redis 实现延时队列主要是就利用 ZSet，将值设置为 task，而 score 设置为任务执行时间点的 timestamp。然后 <strong>通过比较当前时间戳与 zset 中第一个元素的 score 来判断其是否过期</strong>。</p>
<p>Python 代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">QUEUE_KEY = <span class="string">&#x27;delayed task queue&#x27;</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">connection = redis.Redis(connection_pool=pool)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s [%(levelname)s] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%H:%M:%S&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">message: <span class="built_in">str</span>, date: datetime.datetime</span>):</span><br><span class="line">    connection.zadd(QUEUE_KEY, message, date.timestamp())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>():</span><br><span class="line">    task = connection.zrange(QUEUE_KEY, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> task:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">    message = task[<span class="number">0</span>]</span><br><span class="line">    timestamp = connection.zscore(QUEUE_KEY, message)</span><br><span class="line">    now = datetime.datetime.now().timestamp()</span><br><span class="line">    <span class="keyword">if</span> timestamp &lt; now <span class="keyword">or</span> <span class="built_in">abs</span>(timestamp - now) &lt;= <span class="number">1e-6</span>:</span><br><span class="line">        connection.zrem(QUEUE_KEY, message)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, message</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    logging.info(<span class="string">&#x27;push hello 1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 3 秒后过期</span></span><br><span class="line">    push(<span class="string">&#x27;hello 1&#x27;</span>, now + datetime.timedelta(seconds=<span class="number">3</span>))</span><br><span class="line">    logging.info(<span class="string">&#x27;push hello 2&#x27;</span>)</span><br><span class="line">    <span class="comment"># 7 秒后过期</span></span><br><span class="line">    push(<span class="string">&#x27;hello 2&#x27;</span>, now + datetime.timedelta(seconds=<span class="number">7</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        boolean, message = pop()</span><br><span class="line">        <span class="keyword">if</span> boolean:</span><br><span class="line">            logging.info(message)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码意思应该很明了，我们运行上述代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15:30:17 [INFO] push hello 1</span><br><span class="line">15:30:17 [INFO] push hello 2</span><br><span class="line">15:30:20 [INFO] b<span class="string">&#x27;hello 1&#x27;</span></span><br><span class="line">15:30:24 [INFO] b<span class="string">&#x27;hello 2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改两个 task 的过期时间：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">now = datetime.datetime.now()</span><br><span class="line">logging.info(<span class="string">&#x27;push hello 1&#x27;</span>)</span><br><span class="line"><span class="comment"># 7 秒后过期</span></span><br><span class="line">push(<span class="string">&#x27;hello 1&#x27;</span>, now + datetime.timedelta(seconds=<span class="number">7</span>))</span><br><span class="line">logging.info(<span class="string">&#x27;push hello 2&#x27;</span>)</span><br><span class="line"><span class="comment"># 3 秒后过期</span></span><br><span class="line">push(<span class="string">&#x27;hello 2&#x27;</span>, now + datetime.timedelta(seconds=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>然后再次运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15:33:12 [INFO] push hello 1</span><br><span class="line">15:33:12 [INFO] push hello 2</span><br><span class="line">15:33:15 [INFO] b<span class="string">&#x27;hello 2&#x27;</span></span><br><span class="line">15:33:19 [INFO] b<span class="string">&#x27;hello 1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，如我们预期正确的执行了。</p>
<p>在代码中 <code>while True</code> 无限循环尝试取出元素是对 CPU 资源的一种浪费，同时也给 Redis 产生了不小的压力，我们可以放缓速度，比如每秒检测一次：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    boolean, message = pop()</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了文中提到的两种实现方式，延时队列还可以使用数据库定期轮询、DelayQueue、Timer、时间轮、Quartz 等方式实现，本文中没有讨论这些，等将来碰到相关使用场景后，或许会填这个坑 :)</p>
<p>使用 Redis 作为延时任务队列的实现，在具体应用的时候我们需要开启 Redis 的持久化，最好两种方式同时开启，同时定期备份 Redis 持久化文件，最大程度避免任务丢失。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>queue</tag>
        <tag>redis</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 中的 Scope</title>
    <url>//posts/maven-scope/</url>
    <content><![CDATA[<p>Maven 中 scope 的取值一共有 <code>compile</code>、<code>test</code>、<code>runtime</code>、<code>provided</code>、<code>system</code> 这几种，其实没有必要专门写一篇博客来讲。但是最近遇到了一个相关的坑，其实也不能说是坑，主要原因是自己对这些东西一知半解，所以还是有必要深究一下。</p>
<span id="more"></span>

<h2 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h2><p><code>compile</code> 是默认的 scope，即不显式声明条件下 scope 就是 <code>compile</code>。<code>compile</code> 表示该依赖需要参与项目编译、测试、运行等所有步骤中，是最强的依赖，打包时通常需要包含进去。</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p><code>test</code> 表示依赖项目仅仅参与测试相关的工作，包含测试代码的编译、执行，但是原项目的编译、运行均不参与其中。</p>
<h2 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h2><p><code>runtime</code> 表示依赖不会参与项目的编译，不过会参与到后续的测试与运行环节中。与 <code>compile</code> 相比只是少了编译阶段，那为什么要提供这个 scope 呢？</p>
<p>StackOverflow 上有一个经典回答：<a href="https://stackoverflow.com/a/12273576/7944150">https://stackoverflow.com/a/12273576/7944150</a>。简单翻译下，声明 scope 为 <code>runtime</code> 的依赖通常是需要动态加载的代码，比如 JDBC 驱动，或者其他运行时通过 Java 反射调用加载的类。将这种依赖设置为 <code>runtime</code> 可以避免代码中意外的依赖，同时避免依赖传递。</p>
<p><strong>注意，原回答中关于传递依赖的说法是错误的</strong>，参考 <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">Dependency Mechanism</a>，本文下方也会给出这个传递依赖表。</p>
<h2 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h2><p><code>provided</code> 表明打包时可以不将依赖打包进去，JDK 或者容器会提供该依赖，典型的就是 servlet-api.jar，Tomcat 容器或者其他容器一般会提供这个 jar，所以我们就不需要将其声明为 <code>compile</code>。后一种做法还可能导致依赖冲突。</p>
<h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><p><code>system</code> 表明该依赖存在于本地系统，需要提供 JAR 路径，比较少用。</p>
<h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>存在 A -&gt; B -&gt; C，项目 A 依赖于项目 B，B 又依赖于 C。当知道 B 在 A 中的 scope 时，如何确定 C 的 scope？</p>
<ol>
<li>C 在 B 中 scope 为 <code>test</code> 或 <code>provided</code> 时，C 直接丢弃，A 不依赖于 C</li>
<li>否则 A 依赖于 C，C 在 A 中的 scope 由 C 在 B 中的 scope 决定</li>
</ol>
<table>
<thead>
<tr>
<th>B在A中的scope \ C在B中的scope</th>
<th>compile</th>
<th>provided</th>
<th>runtime</th>
<th>test</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>compile</td>
<td>-</td>
<td><strong>runtime</strong></td>
<td>-</td>
</tr>
<tr>
<td>provided</td>
<td>provided</td>
<td>provided</td>
<td>provided</td>
<td>-</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime</td>
<td>-</td>
<td>runtime</td>
<td>-</td>
</tr>
<tr>
<td>test</td>
<td>test</td>
<td>-</td>
<td>test</td>
<td>-</td>
</tr>
</tbody></table>
<p>表格中交叉部分的单元格即为 C 在 A 中的 scope，单元格取值为 “-” 则代表 C 不能被 A 传递依赖。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>我最近在学 Netty，编解码部分用到了 JBoss Marshalling，这个编解码框架有一个通用的 API 以及有几个不同的实现：</p>
<p>通用 API 为：<code>org.jboss.marshalling &gt;&gt; jboss-marshalling</code>，<br>可选的实现有：</p>
<ul>
<li>org.jboss.marshalling &gt;&gt; jboss-marshalling-river</li>
<li>org.jboss.marshalling &gt;&gt; jboss-marshalling-osgi</li>
<li>org.jboss.marshalling &gt;&gt; jboss-marshalling-serial</li>
</ul>
<p>我的项目用到了 <code>serial</code> 版本的实现，但是在添加依赖的时候失误将其 scope 设置成了 <code>test</code>，造成一直无法成功编码、解码。定位问题的方法是将编码解码方法单独摘出来调用，发现这一行返回了 null：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">MarshallerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> Marshalling.getProvidedMarshallerFactory(<span class="string">&quot;serial&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>于是想到 serial 的依赖可能没有成功导入….</p>
<p>在将其依赖重设为 <code>compile</code> 之后项目成功跑起来了。在补充了 scope 相关的知识后我认为 <code>serial</code> 正确的 scope 应该是 <code>runtime</code>，因为这个依赖存在的目的就是通过反射被加载，编译期是不需要的。修改 scope 之后果然不出所料。</p>
<p>所以 <code>runtime</code> 存在的意义就是将抽象与实现解耦，我们可以以 <code>compile</code> 依赖一个 API，然后通过 <code>runtime</code> 依赖其多种不同的实现，根据需要进行使用。</p>
<p>以上为个人理解，如有不符之处，欢迎指出 :-)</p>
<h2 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h2><p>综合考虑以上几种 scope 的特性，当我们想在 Spring Boot 项目中全局排除某一个依赖时，应该如何处理？</p>
<details class="tag-plugin colorful folding" ><summary><span>查看答案</span></summary><div class="body"><p>答案是在依赖声明时将其直接声明为 <mark class="tag-plugin colorful mark" color="green">provided</mark>，由于 <mark class="tag-plugin colorful mark" color="green">provided</mark> 代表着由 JDK 或者容器提供该依赖，而 Spring Boot 项目本身不需要容器即可运行（或者说它本身已经带了一个容器），所以将依赖设为 <mark class="tag-plugin colorful mark" color="green">provided</mark> 可以确保该依赖不会被编译也不会被打包进最终的 jar&#x2F;war，从而实现全局排除的效果。</p></div></details>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 中的跨域问题</title>
    <url>//posts/spring-cross-origin/</url>
    <content><![CDATA[<p>项目做前后端分离，遇到了一个很常见的问题：跨域。想着每次遇到都要搜索解决，而且搜到的文章给出的解决方案又千奇百怪，不一定合适，于是萌生了总结一下的想法。</p>
<span id="more"></span>

<h2 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h2><p>跨站 HTTP 请求（Cross-site HTTP Request）是指发起请求的资源所在的 domain 与该请求所指向的 domain 不同的 HTTP 请求。比如，域名 abc(<code>www.abc.com</code>) 的某个标签引用了域名 cde(<code>www.cde.com</code>) 的某资源，域名 abc 的 Web 应用就会导致浏览器发起一个跨站 HTTP 请求。</p>
<p>这种方式极大地方便了 Web 开发，然而，出于安全考虑（主要是防范 csrf），浏览器会限制从脚本内发起的跨源 HTTP 请求。例如 <code>XMLHttpRequest</code> 和 <code>Fetch API</code> 遵循同源策略。这意味着使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源。</p>
<p>然而如果我们在本地开发前后端分离程序，前端请求本机上的后端 API 却由于浏览器限制而请求失败，十分不便。</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>跨域资源共享（CORS）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。现代浏览器支持在 API 容器中（例如 <code>XMLHttpRequest</code> 或 <code>Fetch</code>）使用 CORS，以降低跨域 HTTP 请求中所带来的风险。</p>
<h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限通过浏览器访问哪些资源。另外，标准要求，对那些可能对服务器产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先用 <code>OPTIONS</code> 方法发起一个<strong>预检请求（Preflight Request，请记住这个概念，后面会经常使用）</strong>，从而获取服务器是否允许该跨域请求。服务器确认允许后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器也可以通知客户端，是否携带身份凭证（包括 Cookie 和 HTTP 认证相关数据）。</p>
<p>CORS 请求失败会产生错误，但为了安全，在 JavaScript 代码层面是无法获知到底哪里出了问题。你只能查看浏览器控制台以得知具体是哪里出现了错误。</p>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>某些请求不会触发 <a href="#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82">CORS 预检请求</a>。若请求满足所有下述条件，则请求可视为“简单请求”：</p>
<ul>
<li>使用下列方法之一<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
</ul>
</li>
<li>首部字段在 <strong>对 CORS 安全的首部字段集合</strong> 中：<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type（下一条为值限制）</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li>Content-Type 的值为下列三者之一<ul>
<li>text&#x2F;plain</li>
<li>multipart&#x2F;form-data</li>
<li>application&#x2F;x-www-form-urlencoded</li>
</ul>
</li>
<li>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器</li>
<li>请求中没有使用 ReadableStream 对象</li>
</ul>
<p>我们可以看到，简单请求的要求是十分严格的，这篇博客我们不会过多讨论简单请求。</p>
<h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>与上一节的简单请求不同，预检请求要求必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</p>
<h2 id="模拟跨域问题"><a href="#模拟跨域问题" class="headerlink" title="模拟跨域问题"></a>模拟跨域问题</h2><h3 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h3><p>使用 JavaScript 请求本地 API 即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xlui&quot;</span> <span class="attr">autofocus</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;postData()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            Response:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;response&quot;</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">postData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> i = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> resp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;response&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;try to submit &#x27;</span> + i);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/&#x27;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                        resp.<span class="property">value</span> = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;username&#x27;</span>: i</span></span><br><span class="line"><span class="language-javascript">                &#125;))</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><p>从简单做起，我们首先写一个简单的 Servlet 服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;MainServlet&quot;, urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 提取用户名</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(request.getInputStream()));</span><br><span class="line">        String input;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((input = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(input);</span><br><span class="line">        &#125;</span><br><span class="line">        input = builder.toString();</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            username = input.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="string">&quot;defaultUsername&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 以上部分代码是为了从浏览器发送的数据中提取出 username 字段，不用认真阅读</span></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, <span class="string">&quot;pass&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter()) &#123;</span><br><span class="line">            out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Servlet-中的跨域问题"><a href="#Servlet-中的跨域问题" class="headerlink" title="Servlet 中的跨域问题"></a>Servlet 中的跨域问题</h2><p>Servlet 中解决跨域问题很简单，利用 <code>Filter</code> 即可。根据上面的原理，在发送跨域请求之前，浏览器会首先以 <code>OPTIONS</code> 方法发送一个预检请求，如果允许跨域，则继续发送跨域请求，如果不允许，则阻止后续请求，并在 conole 打印错误。</p>
<p>我们定制 <code>Filter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;CorsFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) resp;</span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;OPTIONS, GET, POST, PUT, DELETE&quot;</span>);</span><br><span class="line">            <span class="comment">// -1 表示不缓存，正数值表示缓存预检请求的 秒 数</span></span><br><span class="line">            <span class="comment">// 在预检请求缓存的有效期内，后续的跨域请求不需要再发送预检请求</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;-1&quot;</span>); </span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Authorization,x-requested-with,content-type&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 OPTIONS 的处理上：因为这个请求只是为了检查服务器是否支持跨域，所以我们在设置完相应的 Header 之后可以直接 <code>return</code>，即不需要进行后续处理。</p>
<p>对其他 HTTP 方法，必须附带 <code>Access-Control-Allow-Origin</code>，否则虽然请求能够成功完成，浏览器会阻止结果的显示。可以注释掉 <code>chain.doFilter</code> 上一行的设置 Header 语句重新运行，在浏览器控制台的 Network 中可以看到请求返回的数据，但是不会显示在网页，并且控制台也会正常报错。说明浏览器阻止了 XMLHttpRequest 结果的显示。</p>
<h2 id="Spring-Mvc-中的跨域问题"><a href="#Spring-Mvc-中的跨域问题" class="headerlink" title="Spring Mvc 中的跨域问题"></a>Spring Mvc 中的跨域问题</h2><p>解决起来跟上面的类似，还是利用 Filter，不过鉴于这个问题的常见，Spring 为我们提供了一个实现好的 CorsFilter：<code>org.springframework.web.filter.CorsFilter</code>，我们只需要提供必要的参数，然后使用这个 Filter 即可。</p>
<p>示例代码我使用 Spring Boot + Spring Mvc，下面是 Controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@NotNull</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), <span class="string">&quot;spring-mvc-pass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不加其他措施我们是不能通过跨域访问 <code>http://127.0.0.1:8080/</code> 的，下面我们将 Spring 提供的 Filter  加入示例项目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowedOrigins(List.of(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        configuration.setAllowedMethods(List.of(<span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>));</span><br><span class="line">        configuration.setAllowedHeaders(List.of(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        configuration.setMaxAge(-<span class="number">1L</span>);</span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新运行项目，已经可以成功从浏览器端发送跨域请求并接收响应了。</p>
<p>简单查看 CorsFilter 的源码，实现思想与我们自己实现的大体相同。具体来说是：首先通过 <code>AntPathMatcher</code> 获取到我们用 <code>source.registerCorsConfiguration</code> 注册的配置，然后进行预处理：</p>
<ol>
<li>如果请求不是 Cors 请求（请求头包含 <code>Origin</code> 字段），则跳过 CorsFilter</li>
<li>如果有其他 Filter 已经在请求头中添加了 <code>Access-Control-Allow-Origin</code> 字段，跳过 CorsFilter</li>
<li>如果是同源请求，跳过 CorsFilter</li>
<li>如果配置为空，并且该请求是预检请求（Preflight Request，请求头有 <code>Origin</code> 字段、请求是 <code>OPTIONS</code> 方法，请求头不包含 <code>Access-Control-Allow-Origin</code> 字段），则拒绝该请求</li>
<li>如果配置为空，并且该请求不是预检请求，则跳过 CorsFilter</li>
</ol>
<p>预处理之后进行跨域权限检查：</p>
<ol>
<li>检查 Origin 是否符合配置，不符合则拒绝请求</li>
<li>检查请求 Method 是否符合配置，不符合则拒绝请求</li>
<li>检查 Headers 是否符合配置，不符合则拒绝请求</li>
</ol>
<p>然后设置响应：</p>
<ol>
<li>setAccessControlAllowOrigin</li>
<li>setAccessControlAllowMethods（仅预检请求）</li>
<li>setAccessControlAllowHeaders（仅预检请求，并且配置了 Allowed Headers）</li>
<li>setAccessControlExposeHeaders（配置了 Expose Headers）</li>
<li>setAccessControlAllowCredentials（配置了 Allowed Credentials）</li>
<li>setAccessControlMaxAge（仅预检请求，并且配置了 Max Age）</li>
</ol>
<p>可以看出来，比起我们自己设计 CorsFilter，Spring 提供的 CorsFilter 还自己根据配置进行了各种检查，而我们在使用的时候只需要传入自定义的配置即可，极大地简化了开发难度同时又增加了灵活性。</p>
<h2 id="Spring-4-2-以后的跨域问题"><a href="#Spring-4-2-以后的跨域问题" class="headerlink" title="Spring 4.2 以后的跨域问题"></a>Spring 4.2 以后的跨域问题</h2><p>Spring Framework 4.2 版本开始原生支持跨域，相较于之前配置 Filter 的方式，Spring 提供了一个注解 <code>@CorssOrigin</code> 来简化配置。</p>
<p>我们只需要将 <code>@CrossOrigin</code> 添加在需要的 API 或者 Controller 上，然后设置其参数即可完成配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(</span></span><br><span class="line"><span class="meta">        origins = &quot;*&quot;,</span></span><br><span class="line"><span class="meta">        methods = &#123;RequestMethod.OPTIONS, RequestMethod.GET, RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">        allowedHeaders = &#123;&quot;Authorization&quot;, &quot;Content-Type&quot;&#125;,</span></span><br><span class="line"><span class="meta">        maxAge = -1L,</span></span><br><span class="line"><span class="meta">        allowCredentials = &quot;false&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/&quot;, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@NotNull</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), <span class="string">&quot;spring-mvc-pass&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者直接使用默认配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/&quot;, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">index</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@NotNull</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), <span class="string">&quot;spring-mvc-pass&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们还可以通过 Configuration 来手动配置全局规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/conf&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/conf&quot;, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">config</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@NotNull</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(user.getUsername(), <span class="string">&quot;spring-mvc-pass&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">HTTP 访问控制（CORS）</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>cross region</tag>
      </tags>
  </entry>
  <entry>
    <title>Alfred 精确计算器</title>
    <url>//posts/alfred-accurate-calculator/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Alfred 自带了一个计算器，可以在激活后直接输入运算符进行计算：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2024/alfred-accurate-calculator/alfred-calculator-with-big-number.png" alt="Alfred calculator with big number" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Alfred calculator with big number</span></div></div>

<p>但是正如上图所示，Alfred 原生的计算器并不能处理大数场景，在公司内部开发时，我们经常需要跟 snowflake 算法生成的 ID 打交道（非常长的数字），因此就经常需要进行大数间的运算。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如上图的计算结果是：<code>1.23456789e18</code>，实际上等价于 <code>1234567890000000000</code>，是一个错误的结果。</p>
<p>我们期望的正确结果是：<code>1234567890123456790</code>，Alfred 原生计算器丢失了精度信息。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Python 在这种情况下工作正常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python3 -c <span class="string">&quot;print(eval(&#x27;1234567890123456789+1&#x27;))&quot;</span></span><br><span class="line"><span class="number">1234567890123456790</span></span><br></pre></td></tr></table></figure>

<p>Python 做了很多努力来尽可能使它的数字类型（int）与数学层面上的数字等价，即从用户视角看，Python 的 int 并没有 Java 的 byte、char、int、long、bigint 的区分，是无限大的。</p>
<p>因此我们使用 Python 进行数字运算时，不需要考虑精度问题，这也为解决这个问题提供了一个方案。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>如上一节的示例，我们只需要一个简单的 <code>print(eval(&#39;$&#123;expression&#125;&#39;))</code> 即可，这里我将其封装为 Alfred 的 workflow，以便可以更简单的复用：</p>
<p><a href="https://github.com/akiakise/alfred-accurate-calculator/releases/tag/v1.0">https://github.com/akiakise/alfred-accurate-calculator/releases/tag/v1.0</a></p>
<p>下载 release 界面的 <code>Accurate.Calculator.alfredworkflow</code> 然后双击，Alfred 会自动完成安装进程。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>呼出 Alfred 菜单后使用 <code>calc</code> 前缀激活 workflow，然后输入你的计算语句即可：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2024/alfred-accurate-calculator/usage-1.png" alt="Usage 1" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Usage 1</span></div></div>

<div class="tag-plugin image"><div class="image-bg"><img src="/img/2024/alfred-accurate-calculator/usage-2.png" alt="Usage 2" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Usage 2</span></div></div>

<div class="tag-plugin image"><div class="image-bg"><img src="/img/2024/alfred-accurate-calculator/usage-3.png" alt="Usage 3" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Usage 3</span></div></div>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/akiakise/alfred-accurate-calculator">https://github.com/akiakise/alfred-accurate-calculator</a></p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>alfred</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透详解</title>
    <url>//posts/nat-traversal/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>内网穿透的概念不再赘述，通常我们是希望能够在外出、旅行等不在家情况下也能访问家庭网络（例如查看 NAS 中的照片视频、远程连接内网设备进行办公等），而基于家庭网络环境，内网穿透又有几种不同的方案：</p>
<ol>
<li>有公网 IPv4：DDNS</li>
<li>有公网 IPv6：DDNS</li>
<li>无公网 IP 有云服务器：FRP</li>
<li>无公网 IP 无云服务器：Tailscale、ZeroTier 等虚拟组网工具</li>
</ol>
<p>本文以我的家庭网络环境为例，一篇文章讲明白这几种内网穿透的配置细节，读者可以结合自身的网络环境选取合适的方案。本文我们将所有的服务（Tailscale、FRP、DDNS）都放置在 NAS 上，以内网穿透访问 Windows 远程桌面作为目标：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/target.png" alt="目标" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">目标</span></div></div>

<h1 id="内网门锁"><a href="#内网门锁" class="headerlink" title="内网门锁"></a>内网门锁</h1><p>多数内网穿透都是直接将内网服务穿透后暴露至公网，虽说内网服务也会有各自的密码，但是总会有未知的安全漏洞、我们也有可能误将无密码&#x2F;弱密码服务暴露出去，最好还是在内网服务前加一层 VPN。本文除 <code>Tailscale</code> 外的方案我们都采用 <code>shadowsocks</code> 作为内网服务的入口，预检所有流量，同时也实现流量的端到端加密：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/with-vpn.png" alt="NAT Traversal with VPN" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">NAT Traversal with VPN</span></div></div>

<p>由于后续的 FRP、DDNS 方案都会用到 ss-server（多个方案可共用一个 ss-server），因此我们首先来创建下 ss-server。</p>
<p><code>1.</code> 增加配置文件：</p>
<div class="tag-plugin copy"><span>$</span><input class="copy-area" id="copy_1" value="mkdir -p /docker/config/ss"><button class="copy-btn" onclick="util.copy(&quot;copy_1&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div>
<div class="tag-plugin copy"><span>$</span><input class="copy-area" id="copy_2" value="vim /docker/config/ss/config.json"><button class="copy-btn" onclick="util.copy(&quot;copy_2&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div>

<p><code>2.</code> 编辑配置文件内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;::&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span> <span class="number">12300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lalala&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chacha20-ietf-poly1305&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp_and_udp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enable_udp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>3.</code> 使用 docker 管理服务：</p>
<div class="tag-plugin copy"><span>$</span><input class="copy-area" id="copy_3" value="docker run --name ss --restart=always -p 12300:12300 -p 12300:12300/udp -v /docker/config/ss:/etc/shadowsocks-rust -d teddysun/shadowsocks-rust"><button class="copy-btn" onclick="util.copy(&quot;copy_3&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div>

<p><code>4.</code> 保险手段（每 30 分钟触发下 ss 启动，如果已启动则命令无效，避免手误将 ss 关掉后无法再连上）：</p>
<div class="tag-plugin copy"><span>$</span><input class="copy-area" id="copy_4" value="crontab -e"><button class="copy-btn" onclick="util.copy(&quot;copy_4&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div>
<div class="tag-plugin colorful note" ><div class="title">配置内容</div><div class="body"><p>*&#x2F;30 * * * * docker start ss</p></div></div>

<p>上边我使用命令形式方便理解和减少截图，实际上在 NAS 中创建和管理容器是有图形化界面的，不过原理相同。</p>
<h1 id="DDNS-IPv4"><a href="#DDNS-IPv4" class="headerlink" title="DDNS + IPv4"></a>DDNS + IPv4</h1><p>有公网 IP 的情况下，通过 DDNS 实现内网穿透最为简单：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/ddns-ipv4.png" alt="DDNS+IPv4" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">DDNS+IPv4</span></div></div>

<h2 id="ss-server-配置"><a href="#ss-server-配置" class="headerlink" title="ss-server 配置"></a>ss-server 配置</h2><p>见文章开头「内网门锁」部分。</p>
<h2 id="DDNS-脚本"><a href="#DDNS-脚本" class="headerlink" title="DDNS 脚本"></a>DDNS 脚本</h2><p>在 NAS 上新增 DDNS 脚本（也可以用已有的 DDNS 组件，原理是一样的）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ipv4=$(curl -sS ipv4.ip.sb)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;current ipv4: <span class="variable">$ipv4</span>&quot;</span></span><br><span class="line">config_json=$(curl -sS -X GET <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/&lt;ZONE_ID&gt;/dns_records/&lt;RECORD_ID&gt;&quot;</span> -H <span class="string">&quot;X-Auth-Email: &lt;YOUR_EMAIL&gt;&quot;</span> -H <span class="string">&quot;X-Auth-Key: &lt;YOUR_AUTH_KEY&gt;&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span>)</span><br><span class="line">config_ipv4=$(<span class="built_in">echo</span> <span class="variable">$config_json</span> | sed <span class="string">&#x27;s/.*content&quot;:&quot;\(.*\)&quot;,&quot;proxiable.*/\1/g&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="variable">$config_ipv4</span> ]];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;current ipv4 is empty&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;config ipv4: <span class="variable">$config_ipv4</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ipv4</span>&quot;</span> == <span class="string">&quot;<span class="variable">$config_ipv4</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;current ipv4 and config ipv4 equals, skip&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> $(curl -sS -X PUT <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/&lt;ZONE_ID&gt;/dns_records/&lt;RECORD_ID&gt;&quot;</span> \</span><br><span class="line">        -H <span class="string">&quot;X-Auth-Email: &lt;YOUR_EMAIL&gt;&quot;</span> \</span><br><span class="line">        -H <span class="string">&quot;X-Auth-Key: &lt;YOUR_AUTH_KEY&gt;&quot;</span> \</span><br><span class="line">        -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">        -d <span class="string">&#x27;&#123;&quot;type&quot;:&quot;A&quot;,&quot;name&quot;:&quot;&lt;YOUR_DOMAIN_NAME&gt;&quot;,&quot;content&quot;:&quot;&#x27;</span><span class="variable">$ipv4</span><span class="string">&#x27;&quot;,&quot;ttl&quot;:120, &quot;proxied&quot;:false&#125;&#x27;</span>)	</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>脚本中 <code>&lt;&gt;</code> 中的都是变量，需要替换下：</p>
<ul>
<li>ZONE_ID：在 Cloudflare 域名界面右下角的“区域ID”</li>
<li>RECORD_ID：替换 ZONE_ID 后访问 <code>https://dash.cloudflare.com/api/v4/zones/&lt;ZONE_ID&gt;/dns_records?per_page=200&amp;order=type&amp;direction=asc</code>，找到 name 匹配你域名的记录的 <code>id</code> 字段</li>
<li>YOUR_EMAIL：你的 Cloudflare 账户邮箱</li>
<li>YOUR_AUTH_KEY：在 Cloudflare 域名界面右下角的“获取您的 API 令牌”，生成一个可以操作 DNS 的 API 令牌，使用“编辑区域 DNS”模板即可</li>
<li>YOUR_DOMAIN_NAME：你的 DDNS 要绑定的域名</li>
</ul>
<p>注意，脚本会先比对当前数据是否一致，所以变量中 RECORD_ID 和 YOUR_DOMAIN_NAME 是一一对应的，即 RECORD_ID 应该就是 YOUR_DOMAIN_NAME 对应的 id。</p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>在光猫&#x2F;路由器（桥接）上配置端口转发，将 <code>12300</code> 端口的流量转发至 NAS：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/ddns-forward.png" alt="DDNS Forward" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">DDNS Forward</span></div></div>

<h2 id="ss-client-配置"><a href="#ss-client-配置" class="headerlink" title="ss-client 配置"></a>ss-client 配置</h2><p>客户端通过指定 IP 规则来实现用内网 IP 访问服务，以 <code>Quantumult X</code> 配置举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server_local]</span><br><span class="line">shadowsocks=ddns.domain.com:12300, method=chacha20-ietf-poly1305, password=lalala, fast-open=false, udp-relay=true, tag=ss</span><br><span class="line"></span><br><span class="line">[filter_local]</span><br><span class="line"># 我的内网网段为 192.168.10.x </span><br><span class="line">ip-cidr, 192.168.10.0/24, ss</span><br><span class="line">ip-cidr, 192.168.0.0/16, direct</span><br></pre></td></tr></table></figure>

<p>这样，客户端在访问 <code>192.168.10.x</code> 时 <code>Quantumult X</code> 就会将流量路由到 ss 节点，ss 节点看到域名后会去解析其对应的公网 IP，再然后 ss-client 会将流量加密后发往光猫&#x2F;路由器（桥接）的 <code>12300</code> 端口，光猫&#x2F;路由器（桥接）再依据端口转发规则将流量转发到 NAS 上的 ss-server，ss-server 解密流量后访问 <code>192.168.10.x</code>。</p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>DDNS 方案的优点是不需要中转，流量直达家里的设备，能轻松跑到家宽上传上限，唯一的缺点是必须有公网 IP。</p>
<h1 id="DDNS-IPv6"><a href="#DDNS-IPv6" class="headerlink" title="DDNS + IPv6"></a>DDNS + IPv6</h1><p>受限于当前公网 IPv4 越来越难拿到，能给每一粒沙子都分配一个 IP 的 IPv6 成了另一个可行方案：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/ddns-ipv6.png" alt="DDNS+IPv6" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">DDNS+IPv6</span></div></div>

<p>依然是这张图，不过红线上的流量变成了 IPv6。</p>
<h2 id="ss-server-配置-1"><a href="#ss-server-配置-1" class="headerlink" title="ss-server 配置"></a>ss-server 配置</h2><p>见文章开头「内网门锁」部分。</p>
<h2 id="DDNS-脚本-1"><a href="#DDNS-脚本-1" class="headerlink" title="DDNS 脚本"></a>DDNS 脚本</h2><p>在 NAS 上新增 DDNS 脚本（也可以用已有的 DDNS 组件，原理是一样的）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipv6=$(curl -sS ipv6.ip.sb)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;current ipv6: <span class="variable">$ipv6</span>&quot;</span></span><br><span class="line">config_json_v6=$(curl -sS -X GET <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/&lt;ZONE_ID&gt;/dns_records/&lt;RECORD_ID_V6&gt;&quot;</span> -H <span class="string">&quot;X-Auth-Email: &lt;YOUR_EMAIL&gt;&quot;</span> -H <span class="string">&quot;X-Auth-Key: &lt;YOUR_AUTH_KEY&gt;&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span>)</span><br><span class="line">config_ipv6=$(<span class="built_in">echo</span> <span class="variable">$config_json_v6</span> | sed <span class="string">&#x27;s/.*content&quot;:&quot;\(.*\)&quot;,&quot;proxiable.*/\1/g&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="variable">$config_ipv6</span> ]];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;current ipv6 is empty&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;config ipv6: <span class="variable">$config_ipv6</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ipv6</span>&quot;</span> == <span class="string">&quot;<span class="variable">$config_ipv6</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> <span class="string">&quot;current ipv6 and config ipv6 equals, skip&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;[&#x27;</span>`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`<span class="string">&#x27;]&#x27;</span> $(curl -sS -X PUT <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/&lt;ZONE_ID&gt;/dns_records/&lt;RECORD_ID_V6&gt;&quot;</span> \</span><br><span class="line">        -H <span class="string">&quot;X-Auth-Email: &lt;YOUR_EMAIL&gt;&quot;</span> \</span><br><span class="line">        -H <span class="string">&quot;X-Auth-Key: &lt;YOUR_AUTH_KEY&gt;&quot;</span> \</span><br><span class="line">        -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">        -d <span class="string">&#x27;&#123;&quot;type&quot;:&quot;AAAA&quot;,&quot;name&quot;:&quot;&lt;YOUR_DOMAIN_NAME_V6&gt;&quot;,&quot;content&quot;:&quot;&#x27;</span><span class="variable">$ipv6</span><span class="string">&#x27;&quot;,&quot;ttl&quot;:120, &quot;proxied&quot;:false&#125;&#x27;</span>)	</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>脚本中 <code>&lt;&gt;</code> 中的都是变量，需要替换下：</p>
<ul>
<li>ZONE_ID：在 Cloudflare 域名界面右下角的“区域ID”</li>
<li>RECORD_ID_V6：替换 ZONE_ID 后访问 <code>https://dash.cloudflare.com/api/v4/zones/&lt;ZONE_ID&gt;/dns_records?per_page=200&amp;order=type&amp;direction=asc</code>，找到 name 匹配你域名的记录的 <code>id</code> 字段</li>
<li>YOUR_EMAIL：你的 Cloudflare 账户邮箱</li>
<li>YOUR_AUTH_KEY：在 Cloudflare 域名界面右下角的“获取您的 API 令牌”，生成一个可以操作 DNS 的 API 令牌，使用“编辑区域 DNS”模板即可</li>
<li>YOUR_DOMAIN_NAME_V6：你的 DDNS 要绑定的域名</li>
</ul>
<p>注意，脚本会先比对当前数据是否一致，所以变量中 RECORD_ID_V6 和 YOUR_DOMAIN_NAME_V6 是一一对应的，即 RECORD_ID_V6 应该就是 YOUR_DOMAIN_NAME_V6 对应的 id。</p>
<h2 id="防火墙放行配置"><a href="#防火墙放行配置" class="headerlink" title="防火墙放行配置"></a>防火墙放行配置</h2><p>在 IPv6 情况下，端口转发已经没有必要了，因为所有内网设备分配的也都是公网 IP，我们需要做的是放行 ss-server 所在机器的防火墙。但是内网设备分配的公网 IP 也会动态变化，我们应该如何配置防火墙才能在 IP 变化时不需要调整配置呢？可以用 <a href="https://networklessons.com/ipv6/ipv6-eui-64-explained">EUI-64 地址</a>。</p>
<p>首先找到 ss-server 所在机器的 IPv6 地址，假设为 <code>2001:2002:2003:2004:****:**ff:fe**:****</code>，记下 <code>****:**ff:fe**:****</code> 部分，使用 EUI-64 <code>&lt;需要暴露的主机的后缀&gt;/::ffff:ffff:ffff:ffff</code>。</p>
<p>假设我们的 IPv6 地址为 <code>2001:2002:2003:2004:1:20ff:fe25:2025</code>，则对应 EUI-64 地址为 <code>1:20ff:fe25:2025/::ffff:ffff:ffff:ffff</code>，将这个地址填入防火墙放行即可：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/ipv6-firewall-allow.png" alt="IPv6 Firewall Allow" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">IPv6 Firewall Allow</span></div></div>

<p>注意：<strong>千万不要关闭 IPv6 防火墙，除非你明确知道这有什么后果！！！！！</strong></p>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>客户端通过指定 IP 规则来实现用内网 IP 访问服务，以 <code>Quantumult X</code> 配置举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server_local]</span><br><span class="line">shadowsocks=ddnsv6.domain.com:12300, method=chacha20-ietf-poly1305, password=lalala, fast-open=false, udp-relay=true, tag=ss</span><br><span class="line"></span><br><span class="line">[filter_local]</span><br><span class="line"># 我的内网网段为 192.168.10.x </span><br><span class="line">ip-cidr, 192.168.10.0/24, ss</span><br><span class="line">ip-cidr, 192.168.0.0/16, direct</span><br></pre></td></tr></table></figure>

<p>这样，客户端在访问 <code>192.168.10.x</code> 时 <code>Quantumult X</code> 就会将流量路由到 ss 节点，ss 节点看到域名后会去解析其对应的公网 IP，再然后 ss-client 会将流量加密后发往光猫&#x2F;路由器（桥接）的 <code>12300</code> 端口，光猫&#x2F;路由器（桥接）再依据端口转发规则将流量转发到 NAS 上的 ss-server，ss-server 解密流量后访问 <code>192.168.10.x</code>。</p>
<p>注意，代理软件不能关闭 IPv6，否则域名解析不出来结果。</p>
<h2 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h2><p>IPv6 方案的优点与 IPv4 相同，都是流量直达家里的设备，并且 IPv6 不需要额外向运营商申请。</p>
<h1 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h1><p>针对无公网 IP 有云服务器的情况，我们通过 FRP 来实现内网穿透：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/frp.png" alt="FRP" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">FRP</span></div></div>

<h2 id="ss-server-配置-2"><a href="#ss-server-配置-2" class="headerlink" title="ss-server 配置"></a>ss-server 配置</h2><p>见文章开头「内网门锁」部分。</p>
<h2 id="frps-配置"><a href="#frps-配置" class="headerlink" title="frps 配置"></a>frps 配置</h2><p>假设中转服务器 IP 为 <code>1.2.3.4</code>，首先我们通过脚本安装 frp：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/mvscode/frps-onekey/master/install-frps.sh -O ./install-frps.sh</span><br><span class="line"><span class="built_in">chmod</span> +x ./install-frps.sh</span><br><span class="line">./install-frps.sh install</span><br></pre></td></tr></table></figure>

<p>跟着提示安装即可，期间脚本会生成 frps 的 token，这个我们需要记录下。假设 frps 的端口为 <code>12500</code>，token 为 <code>YOURFRPSTOKEN</code>。</p>
<p>配置 systemd 管理 frps 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>

<p>填入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/frps/frps -c /usr/local/frps/frps.toml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>加载 systemd 服务并启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start frps</span><br><span class="line">systemctl <span class="built_in">enable</span> frps</span><br></pre></td></tr></table></figure>

<p>检查服务运行状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure>

<p>现在 frps 会随着机器启动自动运行了。</p>
<h2 id="frpc-配置"><a href="#frpc-配置" class="headerlink" title="frpc 配置"></a>frpc 配置</h2><p>新增配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /docker/config/frpc</span><br><span class="line">vim /docker/config/frpc/frpc.toml</span><br></pre></td></tr></table></figure>

<p>配置文件内容：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;1.2.3.4&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">12500</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;YOURFRPSTOKEN&quot;</span> <span class="comment"># 替换为中转服务器的 token</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;shadowsocks&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">12300</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">12400</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;shadowsocks-udp&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;udp&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">12300</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">12400</span></span><br></pre></td></tr></table></figure>

<p>使用 docker 方便管理服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name frpc --restart=always --net host -v /docker/config/frpc/frpc.toml:/frp/frpc.toml -d stilleshan/frpc</span><br></pre></td></tr></table></figure>

<p>这样，我们内网启动了 frpc，它会通过端口 <code>12500</code> 和 token <code>YOURFRPSTOKEN</code> 连接到公网中转服务器 <code>1.2.3.4</code>，告诉公网服务器监听 <code>12400</code> 端口的流量，并将发往这个端口的流量转发至 frpc 所在机器的 <code>12300</code> 端口。前文我们在 <code>12300</code> 端口部署了 <code>shadowsocks</code>，于是流量会经过 <code>shaodowsocks</code> 后进入内网。 </p>
<h2 id="客户端配置-1"><a href="#客户端配置-1" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>客户端通过指定 IP 规则来实现用内网 IP 访问服务，以 <code>Quantumult X</code> 配置举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server_local]</span><br><span class="line">shadowsocks=1.2.3.4:12400, method=chacha20-ietf-poly1305, password=lalala, fast-open=false, udp-relay=false, tag=ss</span><br><span class="line"></span><br><span class="line">[filter_local]</span><br><span class="line"># 我的内网网段为 192.168.10.x </span><br><span class="line">ip-cidr, 192.168.10.0/24, ss</span><br><span class="line">ip-cidr, 192.168.0.0/16, direct</span><br></pre></td></tr></table></figure>

<p>这样，客户端在访问 <code>192.168.10.x</code> 时 <code>Quantumult X</code> 就会将流量路由到 ss 节点，ss-client 将流量加密后发往 <code>1.2.3.4</code> 的 <code>12400</code> 端口，<code>1.2.3.4</code> 的 <code>12400</code> 端口实际是 FRP 映射的 NAS 的 <code>12300</code> 端口，于是流量就被发到内网 ss-server，ss-server 解密流量后访问 <code>192.168.10.x</code>。</p>
<h2 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h2><p>FRP 方案的优点是不需要公网 IP，任何网络环境都可以部署，缺点是需要一台云服务器用于流量中转，同时该方案的网络带宽也受限于云服务器和家庭网络的上传上限，即 <code>MAX(带宽) = MIN(云服务器上传, 家宽上传)</code>。</p>
<h1 id="Tailscale"><a href="#Tailscale" class="headerlink" title="Tailscale"></a>Tailscale</h1><p>Tailscale 的使用相较于其他方案非常简单，而且它不需要公网 IP 和云服务器，可谓是最低成本的内网穿透方案，但是由于 Tailscale 客户端会占用 VPN 通道（iOS），导致它无法与 <code>Quantumult X</code> 之类的共存，因此我只是将它作为一个备用的穿透工具。</p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>在 <a href="https://tailscale.com/">https://tailscale.com/</a> 注册账号，并转到 <a href="https://login.tailscale.com/admin/settings/keys">https://login.tailscale.com/admin/settings/keys</a> 来生成 <code>auth key</code> 和 <code>access token</code>:</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/tailscale-key.png" alt="Tailscale Keys" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Tailscale Keys</span></div></div>

<h2 id="NAS-配置"><a href="#NAS-配置" class="headerlink" title="NAS 配置"></a>NAS 配置</h2><p>使用 docker 方便管理服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /docker/config/tailscale</span><br><span class="line">docker run --name tailscale --restart=always --net host --cap-add NET_ADMIN -v /docker/config/tailscale:/var/lib -v /docker/config/tailscale:/dev/net/tun -e TS_ROUTES=192.168.10.0/24 -e TS_AUTHKEY=刚申请的AuthKey -e TS_STATE_DIR=/var/lib/tailscale -d tailscale/tailscale</span><br></pre></td></tr></table></figure>

<p>启动成功后即可在 <a href="https://login.tailscale.com/admin/machines">Tailscale后台</a> 看到机器上线了：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/tailscale-machines.png" alt="Tailscale Machines" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Tailscale Machines</span></div></div>

<p>其中 <code>Subnets</code> 旁边的感叹号提示我们在 docker 启动时添加的网段还没有真实生效，接下来我们让它生效：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/tailscale-subnet-1.png" alt="Tailscale Subnet Config 1" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Tailscale Subnet Config 1</span></div></div>

<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/tailscale-subnet-2.png" alt="Tailscale Subnet Config 2" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Tailscale Subnet Config 2</span></div></div>

<p>这样，当其他设备加入 Tailscale 后就可以通过 <code>192.168.10.x</code> 访问 NAS 以及其他内网设备了。</p>
<h2 id="客户端配置-2"><a href="#客户端配置-2" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>Tailscale 支持的平台相当广泛，客户端只需要登录账号即可完成配置，开启组网开关即可访问内网设备了。</p>
<h1 id="狡兔三窟"><a href="#狡兔三窟" class="headerlink" title="狡兔三窟"></a>狡兔三窟</h1><p>分布式系统中常说异地多活、容灾等概念，我们内网穿透也可以四种方案并存，以备不时之需，每种方案的配置细节与原理都写在上边了，任君组合 ~</p>
<h1 id="我的网络环境"><a href="#我的网络环境" class="headerlink" title="我的网络环境"></a>我的网络环境</h1><p>我所在的地区是可以下发动态公网 IP 的，所以我主要使用 DDNS + IPv4 的形式，不过我也配置了另外几种方案作为备份，以下是我的家庭网络拓扑：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nat-traversal/my.png" alt="My NAT Traversal" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">My NAT Traversal</span></div></div>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文我们介绍了内网穿透的几种方案，在各式各样工具的加持下，内网穿透现在已经不再是一个难题了。不过网络传输的稳定性依然是一个大问题，家宽上传更是万年的 30M，不过技术发展日新月异，这些问题迟早会被解决，期待那一天的到来！</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>DDNS</tag>
        <tag>FRP</tag>
        <tag>Tailscale</tag>
      </tags>
  </entry>
  <entry>
    <title>我在 NAS 上都部署了什么服务</title>
    <url>//posts/nas/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我在 2022 年年中心血来潮买了一台群晖 DS220+，于是开启了折腾之旅，到现在也有两年半了，现在写这篇文章分享下我都在上边搭建了什么服务，供大家参考。</p>
<h1 id="NAS-及配套设施"><a href="#NAS-及配套设施" class="headerlink" title="NAS 及配套设施"></a>NAS 及配套设施</h1><ul>
<li>内存：DS220+ 默认的 2GB 内存自然是不够用的，加装一条 8GB 内存</li>
<li>硬盘：两块希捷 8TB 硬盘，不组建 NAT 使用（关键文件备份后边会讲到）</li>
<li>UPS：APC BK650M2-CH 四插孔 UPS，可以单独给 NAS 供电 60 分钟，四插孔也方便把猫、路由器一起供上</li>
</ul>
<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>见 <a href="/posts/nat-traversal/" title="内网穿透详解">内网穿透详解</a></p>
<h1 id="照片管理"><a href="#照片管理" class="headerlink" title="照片管理"></a>照片管理</h1><p>使用 Synology Photos 服务端配合 Photos Mobile 自动同步 iOS 上的照片到群晖，在服务端通过<code>手动将照片移动到文件夹 -&gt; 创建基于文件夹的条件相册</code>来使照片源文件井井有条，同时不失相册能力。</p>
<p>假设 2022 年 1 月去杭州旅游，则首先在 Synology Photos 中创建 <code>出游/2022.1 杭州</code> 文件夹并将相关照片都挪入此文件夹，然后创建基于该文件目录的<code>条件相册</code>。这样一方面我们可以在 Photos Mobile 上以相册形式看到照片，另一方面在真实的文件系统中这些文件也都组织在 <code>出游/2022.1 杭州</code> 文件夹下，备份起来也十分方便。</p>
<h1 id="音乐管理"><a href="#音乐管理" class="headerlink" title="音乐管理"></a>音乐管理</h1><p>使用 Navidrome 服务端配合 Amperfy（iOS），Navidrome 可以同步播放记录到 last.fm，Amperfy 支持 iOS 快捷指令，可以快速播放你喜爱的歌单。</p>
<p>不推荐音流，音流在 DDNS 情况下经常加载失败，一旦加载失败离线缓存歌单和在线歌单就完全割裂了，非常难受，Amperfy 没有这方面的问题。</p>
<h1 id="影视动画管理"><a href="#影视动画管理" class="headerlink" title="影视动画管理"></a>影视动画管理</h1><p>因为我本人不看电视剧和电影，只看动画，所以这里只讲动画相关的方案。使用 ani-rss + qbittorrent + jellyfin 打造媒体库：</p>
<ul>
<li>ani-rss: 新一代追番工具，基于 mikanani.me 数据，从订阅到下载再到文件目录整理，一个 ani-rss 就足够了</li>
<li>qbittorrent：下载工具，打开做种并配合 <a href="https://github.com/PBH-BTN/PeerBanHelper">PBH</a> 使用</li>
<li>jellyfin：媒体库管理，ani-rss 会将下载目录组织为 emby&#x2F;jellyfin 更便于刮削的形式，我使用 jellyfin 配合 TMDB 插件刮削媒体库（注意，TMDB 需要配合代理使用）。</li>
</ul>
<p>这样一旦有新番更新，ani-rss 就会自动通过 qbittorrent 下载并由 jellyfin 呈现，同时 jellyfin 也方便记录我们的追番进度。</p>
<h1 id="重要文件备份"><a href="#重要文件备份" class="headerlink" title="重要文件备份"></a>重要文件备份</h1><p>重要文件我采取异盘、异地（公有云）备份，没有极端到冷热备份，这些备份我们通过群晖就可以搞定。</p>
<h2 id="异盘备份"><a href="#异盘备份" class="headerlink" title="异盘备份"></a>异盘备份</h2><p>前文硬盘部分我们两块硬盘没有组建 raid，一方面是为了有更大的空间挥霍，另一方面也是可以做异盘备份（虽然说同时买的硬盘大概率是同一批出厂，也有可能同时坏，不过毕竟是概率事件）。借助群晖的 <code>Cloud Sync -&gt; WebDav</code> 可以很方便的做异盘备份：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nas/cloud-sync.png" alt="Cloud Sync" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Cloud Sync</span></div></div>

<p>如上图所示，我做了如下备份：</p>
<ol>
<li>将 Obsidian 笔记从专用目录 <code>/webdav-sync/Obsidian Vault</code> 备份到了 <code>/important/Obsidian Vault</code></li>
<li>将 OneDrive 文件从 <code>/akiakise/OneDrive</code> 备份到了 <code>/important/OneDrive</code></li>
<li>将照片从 <code>/photo</code> 备份到了 <code>/important/Photo</code></li>
<li>将 <code>/important</code> 备份到了 <code>/important-backup</code>，其中这两个目录分别处于两个硬盘上</li>
</ol>
<p>如上，我们通过 Cloud Sync 收集需要备份的文件，并实现了重要文件的异盘备份。</p>
<p>需要注意的是，Cloud Sync 同步配置时需要将同步方向设置为「仅下载远程更改」，不然可能会有文件来回同步的问题。</p>
<h2 id="异地备份"><a href="#异地备份" class="headerlink" title="异地备份"></a>异地备份</h2><p>在上边的本地备份时我们已经将文件都收集在 <code>/important-backup</code> 里了，接下来我们将其打包、加密、压缩后备份到公有云。</p>
<p>首先我们通过 Cloud Sync 将本地目录与公有云关联起来：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/nas/baidu-sync.png" alt="Baidu Sync" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Baidu Sync</span></div></div>

<p>这样百度网盘中 <code>我的应用数据/Cloud Sync</code> 目录就与本地的 <code>/akiakise/BaiduNetDisk</code> 建立了联系，两个目录之间的文件自动被 Cloud Sync 双向同步。</p>
<p>我们通过 Python 脚本完成本地文件的备份:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;[<span class="subst">&#123;datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)&#125;</span>]&quot;</span></span><br><span class="line"></span><br><span class="line">filename = datetime.today().strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line">expire_filename = (datetime.now() - timedelta(<span class="number">30</span>)).strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line">password = <span class="string">&quot;YOURPASSWORD&quot;</span></span><br><span class="line">compress_dir = <span class="string">&quot;/volume2/important-backup&quot;</span></span><br><span class="line">target_dir = <span class="string">&quot;/volume1/akiakise/BaiduNetDisk/backup&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># directory check</span></span><br><span class="line">os.makedirs(target_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># cleanup today backup files if exist</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(target_dir):</span><br><span class="line">    <span class="keyword">if</span> file.startswith(filename):</span><br><span class="line">        file_path = os.path.join(target_dir, file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;now()&#125;</span> exist today&#x27;s backup files, delete: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        os.remove(file_path)</span><br><span class="line"><span class="comment"># compress</span></span><br><span class="line">res = os.system(<span class="string">f&quot;7z a -v2G -m0=Copy -mhe=on -p<span class="subst">&#123;password&#125;</span> <span class="subst">&#123;target_dir&#125;</span>/<span class="subst">&#123;filename&#125;</span>.7z <span class="subst">&#123;compress_dir&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;now()&#125;</span> 7zip compress failed&quot;</span>)</span><br><span class="line"><span class="comment"># cleanup history files</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(target_dir):</span><br><span class="line">    <span class="keyword">if</span> file &lt; expire_filename:</span><br><span class="line">        file_path = os.path.join(target_dir, file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;now()&#125;</span> detected expire files, delete: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        os.remove(file_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;now()&#125;</span> done&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>替换脚本中的 <code>YOURPASSWORD</code> 为你自己的密码，并替换 <code>compress_dir</code> 和 <code>target_dir</code> 里的目录即可，注意保留 <code>/volume1</code> 或 <code>/volume2</code> 前缀，它是群晖共享文件夹在文件系统中的真实路径。</p>
<p>这个脚本会将 <code>compress_dir</code> 中的文件打包、隐藏文件名、切分为 <code>2GB</code> 大小的分卷（不压缩，压缩太消耗 CPU 而且在照片场景效率不佳），然后移动到 <code>target_dir</code> 中，并删除 <code>target_dir</code> 中 30 天以前的备份文件（避免占用太大空间）。</p>
<p>如脚本所示，我们将文件备份到了 <code>/akiakise/BaiduNetDisk/backup</code> 目录下，它会被 Cloud Sync 自动上传到百度网盘 <code>我的应用数据/Cloud Sync/backup</code> 目录里，完美。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>回头看，NAS 实打实的改变了我的生活，它无时无刻不在提升着我的幸福度，建议爱折腾的同学都入手一个。其实我的场景一个支持 Docker 的主机就能满足了，但是群晖系统的易用性也确实让我非常满意，后续升级硬件的话我还是会选择群晖。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Cloudflare 重定向规则摆脱端口访问服务</title>
    <url>//posts/cloudflare-redirect-rule/</url>
    <content><![CDATA[<p>如果你拥有一个国内服务器或者你的宽带有公网 IP，那么你一定知道在当前环境下尝试通过 80&#x2F;443 提供服务有多困难。多数情况下我们只能另选其他端口，然而非 80&#x2F;443 端口在访问时必须准确写出端口，这在服务数量众多的情况下成本非常高。</p>
<p>本文通过借助 Cloudflare 的重定向规则来实现“无端口”访问非 80&#x2F;443 端口的服务，至少可以简化记忆端口的成本。</p>
<h1 id="创建规则"><a href="#创建规则" class="headerlink" title="创建规则"></a>创建规则</h1><p>进入 Cloudflare 后台选中你的域名后转到<mark class="tag-plugin colorful mark" color="yellow">规则</mark>页面:</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/cloudflare-redirect-rule/create-rule.png" alt="创建规则" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">创建规则</span></div></div>

<p>然后填充表单：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/cloudflare-redirect-rule/edit-rule.png" alt="编辑规则" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">编辑规则</span></div></div>

<p>接下来，在 DNS 页面填入我们刚才在规则页面写的主机名，并打开<mark class="tag-plugin colorful mark" color="yellow">Proxy status</mark>配置：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/cloudflare-redirect-rule/dns.png" alt="DNS 配置" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">DNS 配置</span></div></div>

<h1 id="实际访问"><a href="#实际访问" class="headerlink" title="实际访问"></a>实际访问</h1><p>创建完成后稍等一段时间让 DNS 生效，我们再访问 <code>https://d.akise.app</code> 就会自动跳转到 <code>http://192.168.10.20:9000</code>，实现了“无端口”访问（其实就是把记录端口的事情交给 Cloudflare 来做了）:</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/cloudflare-redirect-rule/result.png" alt="实现效果" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">实现效果</span></div></div>

<p>你还可以在填充表单时选中 <code>Preserve query string</code> 来让跳转后的链接保留 URL query string，以便无缝提供 API 服务，不过我并没有这样的需求，暂时没有验证过这块。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Clash.Meta DNS 配置指南</title>
    <url>//posts/clash-dns-configure/</url>
    <content><![CDATA[<p>随着互联网技术的发展与广告联盟的互联互通，大家对隐私的重视程度也越来越高，而 DNS 作为网络基础设施，其<mark class="tag-plugin colorful mark" color="error">泄露</mark>的风险与泄露后导致的问题影响也越来越大。泄露可能涉及的问题主要有：用户通过虚拟专用网络或网络代理请求的域名被记录或审查、用户浏览历史被记录和分析用于广告投放或数据挖掘。同时 ISP 的 DNS 也天生自带污染和和劫持，并不推荐使用。</p>
<div class="tag-plugin quot"><p class="content" type="text"><span class="empty"></span><span class="text">A DNS leak is a security flaw that allows DNS requests to be revealed to ISP DNS servers, despite the use of a VPN service to attempt to conceal them. Although primarily of concern to VPN users, it is also possible to prevent it for proxy and direct internet users.</span><span class="empty"></span></p></div>

<p><a href="https://wiki.metacubex.one/">虚空终端</a>作为开源项目<a href="https://yuanshen.com/">原神</a>的二次开发版本，提供了更强的 DNS 处理能力，通过简单且合理的配置，可以尽最大可能规避 DNS 污染、劫持、泄露问题（不能做 100% 保证，毕竟不清楚还有没有未知的手段）。</p>
<h1 id="DNS-解析流程"><a href="#DNS-解析流程" class="headerlink" title="DNS 解析流程"></a>DNS 解析流程</h1><p>下图来自虚空终端 wiki: <a href="https://wiki.metacubex.one/config/dns/diagram/">DNS 解析流程</a></p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/clash-dns-configure/cover.png" alt="DNS Resolve" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">DNS Resolve</span></div></div>

<h1 id="配置指南"><a href="#配置指南" class="headerlink" title="配置指南"></a>配置指南</h1><p>我们直接给出推荐配置，并结合上边的解析流程来详细分析：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">geodata-mode:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">geodata-loader:</span> <span class="string">memconservative</span></span><br><span class="line"><span class="attr">geo-auto-update:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">geo-update-interval:</span> <span class="number">24</span></span><br><span class="line"><span class="attr">geox-url:</span></span><br><span class="line">  <span class="attr">geoip:</span> <span class="string">&quot;https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat&quot;</span></span><br><span class="line">  <span class="attr">geosite:</span> <span class="string">&quot;https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat&quot;</span></span><br><span class="line">  <span class="attr">mmdb:</span> <span class="string">&quot;https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/country.mmdb&quot;</span></span><br><span class="line">  <span class="attr">asn:</span> <span class="string">&quot;https://github.com/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb&quot;</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">prefer-h3:</span> <span class="literal">false</span> <span class="comment"># DOH 优先使用 http/3</span></span><br><span class="line">  <span class="attr">use-hosts:</span> <span class="literal">true</span> <span class="comment"># 是否回应配置中的 hosts，默认 true</span></span><br><span class="line">  <span class="attr">use-system-hosts:</span> <span class="literal">false</span> <span class="comment"># 是否查询系统 hosts，默认 true，我们不用系统 hosts</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span> <span class="comment"># DNS 服务监听，仅支持 udp</span></span><br><span class="line">  <span class="attr">ipv6:</span> <span class="literal">true</span> <span class="comment"># ipv6 解析开关</span></span><br><span class="line">  <span class="attr">default-nameserver:</span> <span class="comment"># 默认 DNS, 用于解析 DNS 服务器 的域名，必须为 IP, 可为加密 DNS</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1.2</span><span class="number">.4</span><span class="number">.8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tls://223.5.5.5</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span> <span class="comment"># or reder-host</span></span><br><span class="line">  <span class="attr">fake-ip-range:</span> <span class="number">172.29</span><span class="number">.0</span><span class="number">.1</span><span class="string">/16</span> <span class="comment"># Fake-IP 解析地址池</span></span><br><span class="line">  <span class="attr">fake-ip-filter:</span> <span class="comment"># Fake-IP 过滤，列表中的域名返回真实 IP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.lan&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.in-addr.arpa&#x27;</span></span><br><span class="line">  <span class="comment"># 配置后面的nameserver、fallback和nameserver-policy向dns服务器的连接过程是否遵守遵守rules规则</span></span><br><span class="line">  <span class="comment"># 如果为false（默认值）则这三部分的dns服务器在未特别指定的情况下会直连</span></span><br><span class="line">  <span class="comment"># 如果为true，将会按照rules的规则匹配链接方式（走代理或直连），如果有特别指定则任然以指定值为准</span></span><br><span class="line">  <span class="comment"># 仅当proxy-server-nameserver非空时可以开启此选项, 强烈不建议和prefer-h3一起使用</span></span><br><span class="line">  <span class="comment"># 此外，这三者配置中的dns服务器如果出现域名会采用default-nameserver配置项解析，也请确保正确配置default-nameserver</span></span><br><span class="line">  <span class="attr">respect-rules:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 配置查询域名使用的 DNS 服务器</span></span><br><span class="line">  <span class="attr">nameserver-policy:</span></span><br><span class="line">    <span class="string">&quot;+.lan,+.in-addr.arpa&quot;</span><span class="string">:</span> <span class="string">system</span></span><br><span class="line">    <span class="comment"># 广告拦截，效果有限，请使用浏览器扩展等更有效的手段</span></span><br><span class="line">    <span class="attr">&quot;geosite:category-ads-all&quot;:</span> <span class="string">rcode://success</span></span><br><span class="line">    <span class="comment"># 禁止 apple 更新检测</span></span><br><span class="line">    <span class="attr">&quot;geosite:apple-update&quot;:</span> <span class="string">rcode://success</span></span><br><span class="line">    <span class="attr">&quot;rule-set:direct&quot;:</span></span><br><span class="line">      <span class="comment"># 阿里 DNS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tls://223.5.5.5</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tls://223.6.6.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;https://223.5.5.5/dns-query#h3=true&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;https://223.6.6.6/dns-query#h3=true&#x27;</span></span><br><span class="line">    <span class="string">&quot;geosite:private,onedrive,microsoft@cn,apple@cn,steam@cn,google@cn,jetbrains@cn,category-games@cn,cn&quot;</span><span class="string">:</span></span><br><span class="line">      <span class="comment"># 阿里 DNS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tls://223.5.5.5</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tls://223.6.6.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;https://223.5.5.5/dns-query#h3=true&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;https://223.6.6.6/dns-query#h3=true&#x27;</span></span><br><span class="line">  <span class="attr">proxy-server-nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://223.5.5.5/dns-query#h3=true&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://223.6.6.6/dns-query#h3=true&#x27;</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="comment"># Cloudflare</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://1.1.1.1#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://1.0.0.1#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://1.1.1.1/dns-query#PROXY&amp;h3=true&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://1.0.0.1/dns-query#PROXY&amp;h3=true&#x27;</span></span><br><span class="line">    <span class="comment"># Google</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://8.8.8.8#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://8.8.4.4#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://8.8.8.8/dns-query#PROXY&amp;h3=true&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://8.8.4.4/dns-query#PROXY&amp;h3=true&#x27;</span></span><br><span class="line">    <span class="comment"># 101</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://101.101.101.101#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://101.101.101.101/dns-query#PROXY&#x27;</span></span><br><span class="line">    <span class="comment"># dns.sb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://185.222.222.222#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;tls://45.11.45.11#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://185.222.222.222/dns-query#PROXY&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;https://45.11.45.11/dns-query#PROXY&#x27;</span></span><br><span class="line"><span class="attr">rule-providers:</span></span><br><span class="line">  <span class="attr">direct:</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">classical</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">inline</span></span><br><span class="line">    <span class="attr">payload:</span></span><br><span class="line">      <span class="comment"># CDN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,download-cdn.jetbrains.com&#x27;</span></span><br><span class="line">      <span class="comment"># Clash Dashboard &amp; Converter</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,clash.razord.top&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,yacd.haishan.me&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,nexconvert.com&#x27;</span></span><br><span class="line">      <span class="comment"># DDNS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,ip.sb&#x27;</span></span><br><span class="line">      <span class="comment"># time</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,time.android.com&#x27;</span></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">classical</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">inline</span></span><br><span class="line">    <span class="attr">payload:</span></span><br><span class="line">      <span class="comment"># 这些域名虽然在国内有接入点，但是直连体验并不好，因此强制代理</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,dockerstatic.com&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,fonts.googleapis.com&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,fonts.gstatic.com&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN,www.gstatic.com&#x27;</span></span><br><span class="line">  <span class="attr">reject:</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">classical</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">inline</span></span><br><span class="line">    <span class="attr">payload:</span></span><br><span class="line">      <span class="comment"># niconico 广告</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,ads.nicovideo.jp&#x27;</span></span><br><span class="line">      <span class="comment"># mumu 模拟器广告</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,mumu.nie.netease.com&#x27;</span></span><br><span class="line">      <span class="comment"># postman 更新</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,dl.pstmn.io&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,sync-v3.getpostman.com&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;DOMAIN-SUFFIX,getpostman.com&#x27;</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># 个人规则，1.2.3.4 用作示例</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,1.2.3.4/32,PROXY,no-resolve</span></span><br><span class="line">  <span class="comment"># 规则修正</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,reject,REJECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,proxy,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,direct,DIRECT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 广告过滤</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,category-ads-all,REJECT</span></span><br><span class="line">  <span class="comment"># 强制直连</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,private,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,onedrive,DIRECT</span></span><br><span class="line">  <span class="comment"># @cn 为该规则内的域名在中国大陆有接入点，可直连</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,microsoft@cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,apple@cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,steam@cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,google@cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,jetbrains@cn,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,category-games@cn,DIRECT</span></span><br><span class="line">  <span class="comment"># 流媒体</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,biliintl,国际流媒体</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,youtube,国际流媒体</span></span><br><span class="line">  <span class="comment"># 强制代理</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,google,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,twitter,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,pixiv,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,category-scholar-!cn,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,geolocation-!cn,PROXY</span></span><br><span class="line">  <span class="comment"># 兜底强制直连</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOSITE,cn,DIRECT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># GEOIP 规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,private,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,telegram,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,JP,PROXY</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,CN,DIRECT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 兜底代理</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">MATCH,PROXY</span></span><br></pre></td></tr></table></figure>

<p>在这个配置中，最最核心的就是利用 <code>GEOSITE</code> 来进行域名规则的判断，以下我们分为几种情况来分析其解析流程。</p>
<h2 id="1-直接通过-ip-访问"><a href="#1-直接通过-ip-访问" class="headerlink" title="1. 直接通过 ip 访问"></a>1. 直接通过 ip 访问</h2><p>直接通过 <code>1.2.3.4</code> 访问会命中 <code>IP-CIDR,1.2.3.4/32,PROXY,no-resolve</code> 规则，它会跳过 DNS 解析流程并直接交给对应的策略处理（这里配置为 PROXY 策略）。</p>
<p>假设我们同时有一个域名 <code>example.com</code> 也指向了 <code>1.2.3.4</code>，那我们访问域名的时候并不会走到这条规则，因为规则添加了 <code>no-resolve</code> 条件，除非是直接通过 IP 访问，否则直接跳过此规则。</p>
<h2 id="2-访问境内域名，命中-GEOSITE-规则"><a href="#2-访问境内域名，命中-GEOSITE-规则" class="headerlink" title="2. 访问境内域名，命中 GEOSITE 规则"></a>2. 访问境内域名，命中 GEOSITE 规则</h2><p>当访问的境内域名命中 <code>GEOSITE</code> 规则时，由于指定了 <code>DIRECT</code> 策略，虚空终端会进入 DNS 解析流程，结合配置文件来说流程如下：</p>
<ol>
<li>查询 DNS 缓存，如果查到，拿出对应的 IP 并直接建立连接</li>
<li>匹配 <code>nameserver-policy</code>，我们将所有的境内规则的 <code>GEOSITE</code> 也都配置在了这里，因此肯定会命中这条规则。在 <code>nameserver-policy</code> 内容里我们配置了 AliDNS 的 DoT 和 DoH，虚空终端会并发查询这些 nameserver 并返回最快返回的结果</li>
<li>拿到域名解析结果，直接建立连接，并保存 DNS 缓存</li>
</ol>
<h2 id="3-访问境外域名，命中-GEOSITE-规则"><a href="#3-访问境外域名，命中-GEOSITE-规则" class="headerlink" title="3. 访问境外域名，命中 GEOSITE 规则"></a>3. 访问境外域名，命中 GEOSITE 规则</h2><p>当访问的境外域名命中 <code>GEOSITE</code> 规则时，由于指定了 <code>PROXY</code> 策略，因此虚空终端会直接将域名解析与请求处理路由到 <code>PROXY</code> 节点，跳过自身所有的 DNS 解析流程。</p>
<h2 id="4-访问任意域名，未命中境内或境外-GEOSITE-规则"><a href="#4-访问任意域名，未命中境内或境外-GEOSITE-规则" class="headerlink" title="4. 访问任意域名，未命中境内或境外 GEOSITE 规则"></a>4. 访问任意域名，未命中境内或境外 GEOSITE 规则</h2><p>境内境外 <code>GEOSITE</code> 规则未命中时，规则解析一路往下走到 <code>GEOIP</code> 规则，<code>GEOIP</code> 规则判断前需要先拿到域名对应的 IP，因此虚空终端会发起一次 DNS 解析流程：</p>
<ol>
<li>查询 DNS 缓存，如果查到，拿出对应的 IP 交给 <code>GEOIP</code> 规则判断</li>
<li>匹配 <code>nameserver-policy</code>，我们在这里配置的 <code>GEOSITE</code> 规则跟 <code>rules</code> 里用的 <code>GEOSITE</code> 规则是一致的，因此也无法命中</li>
<li>兜底使用 <code>nameserver</code>，在内容里我们配置了常用的境外 DoT 和 DoH，并且指定这些 DNS 查询时使用 <code>PROXY</code> 节点以加速（境外 DNS 境内直接访问延迟很高），同时配置了 <code>proxy-server-nameserver</code> 来避免鸡蛋问题（考虑到解析速度配置成了 AliDNS，无奈之举），另外节点如果支持 H3 则尽可能使用 H3（这点存疑，境内到境外 H3 稳定性不确定）</li>
<li>拿到域名解析结果，交给 <code>GEOIP</code> 规则判断，并保存 DNS 缓存</li>
<li>如果 <code>GEOIP</code> 规则判断直连，则直接建立连接，如果 <code>GEOIP</code> 规则未命中，则走到兜底使用代理建立连接</li>
</ol>
<p>可以看到，我们兜底使用远程节点来解析未命中规则的域名，我个人倾向于假设未命中规则的都是境外域名，因此都由境外 DNS 解析来避免国内 DNS 保留记录。当然这里也可以改为使用境内 DNS 解析，两种策略任君自选。</p>
<h2 id="5-规则修正"><a href="#5-规则修正" class="headerlink" title="5. 规则修正"></a>5. 规则修正</h2><p>规则库不是万能的，因此必然会出现某些域名分流错误的情况，我们通过补充的 <code>direct</code>、<code>proxy</code>、<code>reject</code> 三个 <code>RULE-SET</code> 来前置修正规则。</p>
<h2 id="补充说明-rule-providers"><a href="#补充说明-rule-providers" class="headerlink" title="补充说明: rule-providers"></a>补充说明: rule-providers</h2><p>我们将强制修正的规则通过 <code>rule-providers</code> 维护，这样做的好处是可以在 <code>rules</code> 和 <code>dns</code> 中使用 <code>rule-set</code> 引用同一份配置，无需重复编写。在配置内容上使用 <code>inline</code> + <code>classical</code> 配合的形式，使得我们无需依赖远程仓库（旧做法是使用 GitHub 仓库或者 gist 托管），同时又可以使用 <code>DOMAIN-SUFFIX</code>、<code>DOMAIN-KEYWORD</code> 等特性，调整成本非常低。</p>
<h2 id="补充说明-default-nameserver、fallback"><a href="#补充说明-default-nameserver、fallback" class="headerlink" title="补充说明: default-nameserver、fallback"></a>补充说明: default-nameserver、fallback</h2><p><code>default-nameserver</code>: 用于解析 <code>nameserver</code>、<code>fallback</code>、<code>nameserver-policy</code> 中通过域名指定的 DNS 服务器，我们使用 IP 配置 DoT 和 DoH 节点，因此不再需要此配置。<br><code>fallback</code>: 虚空终端之前 Clash 使用的策略，逻辑比较复杂，不再推荐，使用更加简单易懂的 <code>nameserver-policy</code> 替代。</p>
<h2 id="补充说明-GEOIP-no-resolve-是错误用法"><a href="#补充说明-GEOIP-no-resolve-是错误用法" class="headerlink" title="补充说明: GEOIP + no-resolve 是错误用法"></a>补充说明: GEOIP + no-resolve 是错误用法</h2><p>网上存在很多在 <code>GEOIP,CN,DIRECT</code> 后加上 <code>no-resolve</code> 的，这实际上是一个<mark class="tag-plugin colorful mark" color="error">错误</mark>的用法，<code>GEOIP</code> 类规则就是要解析出 IP 后再进行 IP 判定的，加了 <code>no-resolve</code> 后如果不是直接通过 IP 访问的话，这条规则就失效了。</p>
<p>同时，虚空终端的规则处理流程是从上往下严格有序的，如果遇到了 IP 类规则（GEOIP、IP-CIDR、IP-CIDR6 等）会尝试进行 DNS 解析拿到 IP 再判断这条规则，如果某个 IP 类规则不带 <code>no-resolve</code> 并且放的比较靠前，那么必然会产生多余的 DNS 解析。</p>
<p>因此，这里的正确用法是<mark class="tag-plugin colorful mark" color="green">将所有的 IP 类规则（GEOIP、IP-CIDR、IP-CIDR6 等）统一放到域名规则之后</mark>，如配置中将所有的 <code>GEOIP</code> 规则都放到了最后边，同时针对需要直接指定 IP 访问的（配置示例中为 <code>1.2.3.4</code>）规则添加 <code>no-resolve</code> 来避免多余的 DNS 解析。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上述的配置与解析，相信你已经对虚空终端的处理流程了如指掌，如果配置过程中遇到什么问题或者与文章不符的情况欢迎评论。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Clash.Meta</tag>
        <tag>Mihomo</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Cloudflare 重定向规则自动处理非法 URL</title>
    <url>//posts/cloudflare-redirect-invalid-url/</url>
    <content><![CDATA[<p>在前文讲了如何使用 Cloudflare 重定向规则实现近似“无端口”访问带 IP 的服务（<a href="/posts/cloudflare-redirect-rule/" title="利用 Cloudflare 重定向规则摆脱端口访问服务">利用 Cloudflare 重定向规则摆脱端口访问服务</a>）后，我们继续利用重定向规则来解决另一个常见的链接错误的问题。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当我们在社交&#x2F;论坛分享链接时，如果没有在链接后加上空格，那么链接后边的内容有很大的概率就会错误地被拼接上来，例如我们分享本文链接时结尾没加空格拼上了 <code>，测试test</code>：</p>
<div class="tag-plugin link dis-select"><a class="link-card plain" title="利用 Cloudflare 重定向规则自动处理非法 URL" href="https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试test" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">利用 Cloudflare 重定向规则自动处理非法 URL</span><span class="cap link footnote">https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试test</span></div><div class="right"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/link/8f277b4ee0ecd.svg"></div></div></a></div>

<p>点击这个链接就会报 404 错误。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="Hexo-❌"><a href="#Hexo-❌" class="headerlink" title="Hexo ❌"></a>Hexo ❌</h2><p>Hexo 本身是一个静态博客，本站托管在 GitHub Pages 上，因此我们没有任何动态的手段来识别错误 URL 并进行处理。</p>
<h2 id="Cloudflare-✔"><a href="#Cloudflare-✔" class="headerlink" title="Cloudflare ✔"></a>Cloudflare ✔</h2><p>Cloudflare 支持针对请求的 URL 做重定向规则，看起来可以满足我们的诉求。那么首先我们明确下需要实现的功能：<strong>我们需要在博客链接包含错误字符时将其重定向到正常的链接</strong>。</p>
<p>假如错误的链接为：<div class="tag-plugin colorful note" ><div class="body"><p><a href="https://blog.akise.app/posts/cloudflare-redirect-invalid-url/%EF%BC%8C%E6%B5%8B%E8%AF%95test">https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试test</a></p></div></div></p>
<p>我们要将其重定向为：<div class="tag-plugin colorful note" ><div class="body"><p><a href="https://blog.akise.app/posts/cloudflare-redirect-invalid-url/">https://blog.akise.app/posts/cloudflare-redirect-invalid-url/</a></p></div></div></p>
<p>在 Cloudflare 添加如下的重定向配置：</p>
<div class="tag-plugin image"><div class="image-bg"><img src="/img/2025/cloudflare-redirect-invalid-url/config.png" alt="重定向配置" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">重定向配置</span></div></div>

<p>参数说明：</p>
<ul>
<li>如果传入请求匹配…：自定义筛选表达式</li>
<li>URI 完整：通配符匹配 <code>https://blog.akise.app/posts/*/*</code>，精确匹配博客 URL 格式，其中第一个 <code>*</code> 匹配文档，第二个 <code>*</code> 匹配多余的字符</li>
<li>URI 路径：结尾不是 <code>/</code>，避免类似于 <code>https://blog.akise.app/posts/cloudflare-redirect-invalid-url/</code> 的链接无限循环重定向</li>
<li>URL 重定向：动态重定向，表达式 <code>wildcard_replace(http.request.uri.path, r&quot;/posts/*/*&quot;, r&quot;/posts/$&#123;1&#125;/&quot;)</code>，状态代码 <code>301</code></li>
</ul>
<h3 id="URL-匹配"><a href="#URL-匹配" class="headerlink" title="URL 匹配"></a>URL 匹配</h3><p>通过通配符和排除规则，针对如下 URL 会走到不同的处理逻辑：</p>
<ul>
<li><code>https://blog.akise.app/posts/cloudflare-redirect-invalid-url/</code>: 由于结尾是 <code>/</code> 跳过 Cloudflare 处理</li>
<li><code>https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试test</code>: 匹配成功，需要重定向</li>
<li><code>https://blog.akise.app/posts/cloudflare-redirect-invalid-url</code>: 由于缺少结尾的 <code>/</code> 跳过 Cloudflare 处理，Hexo 会自动在结尾加一个 <code>/</code></li>
</ul>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>重定向规则使用 <code>wildcard_replace</code>，它会匹配第一个参数，并将其中的 <code>*</code> 编号替换到第二个参数中的 <code>$&#123;数字&#125;</code>，在 <code>wildcard_replace(http.request.uri.path, r&quot;/posts/*/*&quot;, r&quot;/posts/$&#123;1&#125;/&quot;)</code> 规则下针对如下入参：</p>
<div class="tag-plugin colorful note" ><div class="body"><p><a href="https://blog.akise.app/posts/cloudflare-redirect-invalid-url/%EF%BC%8C%E6%B5%8B%E8%AF%95test">https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试test</a></p></div></div>

<p>它会返回：</p>
<div class="tag-plugin colorful note" ><div class="body"><p><a href="https://blog.akise.app/posts/cloudflare-redirect-invalid-url/">https://blog.akise.app/posts/cloudflare-redirect-invalid-url/</a></p></div></div>

<p>完美满足我们的诉求。</p>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>下面我们拼上其他字符进行试验：</p>
<div class="tag-plugin link dis-select"><a class="link-card plain" title="拼上了“，测试”的URL" href="https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">拼上了“，测试”的URL</span><span class="cap link footnote">https://blog.akise.app/posts/cloudflare-redirect-invalid-url/，测试</span></div><div class="right"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/link/8f277b4ee0ecd.svg"></div></div></a></div>

<p>点击上述 URL 就不会再报 404 了，完美。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>可以看到，Cloudflare 重定向规则还是很强大的，通过简单的配置就让我们对域名的访问流程有了较大的定制化能力，Cloudflare 还在测试一项名为 <a href="https://developers.cloudflare.com/rules/snippets/">Snippets</a> 的功能来直接通过 JavaScript 代码干涉访问流程，这样会更加简单便捷，不过目前仅限付费用户可用。</p>
<details class="tag-plugin colorful folding" ><summary><span>附言</span></summary><div class="body"><p>为了实现本文中部分 URL 访问 404、其他 URL 访问重定向的效果，我还在规则中另外增加了“URL 结尾不是 test”的规则 😊</p></div></details>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
</search>
